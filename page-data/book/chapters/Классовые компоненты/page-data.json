{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/Классовые компоненты","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Классовые компоненты","section":"React","path":"klassovye komponenty","subtitles":[{"subtitle":"Производные от Component<P, S, SS>","path":"klassovye komponenty#proizvodnye ot component<p, s, ss>"},{"subtitle":"Производные от PureComponent<Props, State, Snapshot>","path":"klassovye komponenty#proizvodnye ot purecomponent<props, state, snapshot>"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Классовые компоненты</span></h1><p class=\"content__paragraph\">Помимо компонентов на основе функций, <em>React</em> позволяет определять компоненты на основе классов, которые, как в случае реализации <em>ловушки для ошибок</em> просто не заменимы. Кроме этого, с ними необходимо познакомиться, так как они являются частью <em>React</em>. Именно поэтому текущая глава полностью посвящена старым добрым классовым компонентам. </p></section>\n<section class=\"content__section\" id=\"Производные от Component<P, S, SS>\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"proizvodnye ot component<p, s, ss>\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Производные от Component&#x3C;P, S, SS></span></h2><p class=\"content__paragraph\">Пользовательские компоненты построенные на основе классов обязаны расширять базовый обобщенный класс <code>Component&#x3C;Props, State, Snapshot></code> имеющего три необязательных параметра типа.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Первым делом стоит обратить внимание на первую строку, а именно импорт пространства имен <em>React</em>. Не зависимо используете вы его напрямую или нет, оно обязательно должно быть импортировано, в противном случаи компилятор напомнит об этом с помощью ошибки.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] Забыт импорт пространства\n * имен React в следствии чего в\n * точке [1] возникнет ошибка - \n * \n * 'React' refers to a UMD global,\n * but the current file is a module.\n * Consider adding an import instead.ts(2686)\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0]</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того в нашем примере у метода <code>render</code> отсутствует аннотация возвращаемого типа, что на практике даже приветствуется. Но с образовательной точки зрения её указание не принесет никакого вреда.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При переопределении производным классом метода <code>render</code> в качестве типа возвращаемого значения необходимо указывать тип совместимый с указанным в базовом классе, то есть с типом <code>ReactNode</code> поведение и нюансы которого были подробно рассмотрены в главе посвященной функциональным компонентам.</p><p class=\"content__paragraph\">Как говорилось ранее, тип от которого должны наследоваться пользовательские классовые компоненты является обобщенным и имеет три необязательных параметра типа, что и иллюстрирует наш минималистический пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * [0] отсутствует передача аргументов типа\n * определенных как Component&lt;Props, State, Snapshot>\n * что указывает на их необязательность.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token comment\">/** [0] */</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В реальных проектах подобное встречается редко, поэтому следующим шагом разберем логику определения типов описывающих пользовательский компонент. </p><p class=\"content__paragraph\">Начнем по порядку, а именно с <code>Props</code>. Несмотря на то что <em>пропсы</em> делятся на обязательные и необязательные, все они по мере необходимости передаются в качестве аргументов конструктора при создании его экземпляра и доступны по ссылке <code>this.props</code> (обозначим их как <em>общие пропсы</em>). Тем не менее за инициализацию необязательных пропсов ответственен сам классовый компонент для чего и предусмотренно статическое поле <code>defaultProps</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Аннотации в ожиждании указания\n * типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token comment\">/** [0] */</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props <span class=\"token comment\">/** [1] */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тот факт что аннотация <code>defaultProps</code> предполагает тип представляющий лишь ассоциированное с этим полем значение вынуждает разделить декларацию общих пропсов на два типа <code>DefaultProps</code> и <code>Props</code>. Ввиду того что тип <code>Props</code> представляет не только обязательные пропсы, но и необязательные, он должен расширять (<code>extends</code>) тип <code>DefaultProps</code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Не будет лишним упомянуть что в реальных проектах интерфейс <code>Props</code>, помимо <code>DefaultProps</code>, очень часто расширяет множество других интерфейсов. В их число входят типы, предоставляемые библиотеками <em>ui</em>, <em>hoc обертками</em> и обычными библиотеками, как например <em>react-router</em> и его тип <code>RouteComponentProps&#x3C;T></code>.</p><p class=\"content__paragraph\">Поскольку в описании базового класса поле (<code>this.props</code>) принадлежит к типу определенного в качестве первого параметра типа, то есть <code>Component&#x3C;Props></code>, то <code>Props</code> необходимо указать в аннотации не только первого параметра конструктора, но и в качестве первого аргумента базового типа. Иначе <code>this.props</code> так и останется принадлежать к простому объектному типу <code>{}</code> заданному по умолчанию.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Если не передавать Props в качестве\n * аргумента типа в точке [0] то в точке\n * [1] возникнет ошибка ->\n * Property 'message' does not exist on type\n * 'Readonly&lt;{}> &amp; Readonly&lt;{ children?: ReactNode; }>'\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props <span class=\"token comment\">/**[0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok [1]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Как было сказано в теме посвященной функциональным компонентам, что если взять за правило именовать типы пропсов как <code>DefaultProps</code> и <code>Props</code>, то при необходимости в их импорте непременно возникнет коллизия из-за одинаковых имен. Поэтому принято добавлять к названиям названия самих компонентов <code>*DefaultProps</code> и <code>*Props</code>. Но поскольку эти типы повсеместно указываются в аннотациях расположенных в теле классового компонента, то подобные имена попросту усложняют понимание кода. Поэтому для исчерпывающих имен необходимо создавать более компактные псевдонимы типа <code>type</code>.</p><p class=\"content__paragraph\">Также стоит сразу сказать, что все три типа выступающих в качестве аргументов базового типа нуждаются в более компактных идентификаторах определяемых с помощью псевдонимов. Но кроме того, все они описывают объекты, мутация которых не предполагается. Простыми словами типы <code>Props</code>, <code>State</code> и <code>Snapshot</code> используются исключительно в аннотациях <code>readonly</code> полей класса, параметрах его методов и возвращаемых ими значениях. Поскольку секрет здорового приложения кроется в типобезопасности, всю упомянутую троицу необходимо сделать неизменяемой. Для этого существует специальный тип <code>Readonly&#x3C;T></code>. Но так как преобразование типов в каждой отдельной аннотации приведет к чрезмерному увеличению кода, необходимо проделать это единожды в определении их псевдонимов.</p><p class=\"content__paragraph\">Посмотрим как новая информация преобразит наш основной пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Имена интерфейсов получили префикс\n * в виде названия компонента.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Для конкретных типов преобразованных\n * в типы только для чтения\n * определен псевдоним.\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Добавлен экспорт не только самого\n * компонента, но и типа представляющего\n * его основные пропсы.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// экспортируем типа *Props</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также стоит упомянуть что пропсы всех компонентов по умолчанию имеют определение необязательного (объявленного с модификатором <code>?:</code>) поля <code>children</code> принадлежащего к оговоренному ранее типу <code>ReactNode</code>. Простыми словами можно вообще не передавать аргументы базовому типу и компилятор не выдаст ошибку при обращении к полю <code>this.props.children</code>;</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Label</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] несмотря на то что базовому\n * типу не были установлены аргумента типа\n * обращение к свойству children не вызывает\n * ошибки поскольку данное свойство определенно\n * в базовом типе.\n */</span>\n\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token string\">\"label\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string as children -> Ok [1]</span>\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number as children -> Ok [2]</span>\n<span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined as chiildren -> Ok [3]</span>\n\n <span class=\"token comment\">/**\n  * При создании экземпляров компонента Label\n  * допустимо указывать в качестве children\n  * как строку [1], так и числа [2] и кроме\n  * того не указывать значения вовсе [3]\n  */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В остальном <code>children</code> имеют то же поведение и недостатки подробно описанные в главе посвященной функциональным компонентам. Поэтому оставим их и приступим к рассмотрению второго параметра базового типа <code>Component</code>, а именно к типу представляющего состояние компонента <code>Component&#x3C;Props, State></code>.</p><p class=\"content__paragraph\">Несмотря на то что состояние является закрытым от внешнего мира, тип представляющий его также принято называть с префиксом в роли которого выступает название самого компонента. Причина кроется не только в соблюдении общего стиля кода относительно именования типов пропсов. На практике могут возникнуть коллизии имен при создании вложенных классовых компонентов что является обычным делом при создании <em>hoc</em>. Поэтому для типа описывающего состояние компонента так же необходимо определить ещё и псевдоним и не забыть передать его в качестве второго аргумента базового типа и указать в аннотации поля <code>state</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// определение State</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание псевдонима для типа </span>\n\n<span class=\"token comment\">/**\n * [0] передача псевдонима State\n * в качестве второго аргумента\n * базового типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State <span class=\"token comment\">/** [0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DOne!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// определение поля state</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        time<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Пора обратить внимание на момент связанный с объявлением <code>defaultProps</code> и <code>state</code>, которым необходимо указывать (или не указывать вовсе) модификатор доступа <code>public</code>, так как к ним должен быть доступ извне. Кроме того не будет лишним добавить этим полям модификатор <code>readonly</code>, который поможет избежать случайных изменений.</p><p class=\"content__paragraph\">Говоря о состоянии нельзя обойти стороной такой метод как <code>setState</code> необходимый для его изменения, о котором известно что в качестве аргумента он может принимать как непосредственно объект представляющий новое состояние, так и функцию возвращающую его. Но поскольку первый случай ничего, что нас могло бы заинтересовать, из себя не представляет, рассмотрен будет лишь второй вариант с функцией. Поэтому продолжим наш основной пример и внесем в него изменения касающиеся изменения состояния. Создадим скрытый метод <code>reset</code> который будет сбрасывать значение пройденного времени.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DOne!</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        time<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// определение скрытого метода reset</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Вызываем метод setState с функцией\n         * ассинхронного изменения состояния\n         * в качестве первого аргумента.\n         */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>time<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращаем новое состояние</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Из того кода что был добавлен в наш пример стоит обратить внимание на несколько моментов. Прежде всего это использование псевдонимов <code>Props</code> и <code>State</code> в аннотациях параметров функции переданной в метод <code>setState</code>. Обозначим её как <code>updater</code>. Как было сказано ранее, типы описывающие состояние и пропсы используются повсеместно в коде компонента. Кроме того стоит сказать что описание сигнатуры функции <code>updater</code> подобным образом излишне и имеет место быт лишь в образовательных целях. Достаточно просто определить необходимые параметры и вывод типов самостоятельно определит их принадлежность.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Вывод типов в состоянии определить\n         * принадлежность параметров, поэтому\n         * самостоятельнаое аннотирование излишне.\n         * \n         * (parameter) prevState: Readonly&lt;TimerState>\n         * (parameter) props: Readonly&lt;TimerProps>\n         */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>time<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В добавок к этому стоит возложить определение возвращаемого значения из функции <code>updater</code> на вывод типов, поскольку это не просто излишне, но и в большинстве случаев может являться причиной избыточного кода. Все дело в том что когда состояние содержит множество полей, обновление которых не производится одновременно, при указании возвращаемого типа как <code>State</code> будет невозможно частичное обновление, поскольку лишь часть типа <code>State</code> не совместимо с целым <code>State</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[0] */</span>\n  yesCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  noCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span>State<span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    yesCount<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    noCount<span class=\"token operator\">:</span><span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">buttonA_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// инкрементируем yesCount</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>yesCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>yesCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**1 */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">buttonB_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// инкрементируем noCount</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>noCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>noCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[2] */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Yes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>yesCount<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>No<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>noCount<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonA_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>yes<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonB_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>no<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] описание состояния с двумя полями.\n * [1] Error -> поскольку {yesCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n * [2] Error -> поскольку {noCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В случае когда функция <code>updater</code> выполняет частичное обновление состояния и при этом тип возвращаемого значения указан явно, необходимо воспользоваться механизмом распространения (<code>spread</code>) дополнив отсутствующую часть в новом состоянии старым.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span>State<span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">buttonA_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[0] */</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> yesCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>yesCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">buttonB_clickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">/**[1] */</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> noCount<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>noCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] В обоих случаях ошибки не воникает\n * поскольку недостающая часть состояния\n * дополняется из предыдущего состояния,\n * что делает тип возвращаемого объекта\n * совместимым с типом State.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Несмотря на то что механизм распространения помогает обойти трудности связанные с совместимостью типов, лучшим вариантом будет вообще не указывать возвращаемый функцией <code>updater</code> тип, а возложить эту обязанность на вывод типов. </p><p class=\"content__paragraph\">И последнее о чем ещё не упомянули, что метод <code>setState</code>, в качестве второго параметра принимает функцию обратного вызова, декларация которой очень проста и будет рассмотрена в самом конце данной главы, когда весь код будет собран в одном месте.</p><p class=\"content__paragraph\">И на этом рассмотрение состояния завершено, поэтому можно приступить к рассмотрению третьего и последнего параметра базового типа <code>Component&#x3C;Props, State, Snapshot></code>.</p><p class=\"content__paragraph\">Принципы применяемые для описания типа представляющего <code>Snapshot</code> ничем не отличаются от описания <code>Props</code> и <code>State</code>, поэтому пояснения будут опущены.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimerDefaultProps</span> <span class=\"token punctuation\">{</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerState</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// определение Snapshot</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimerSnapshot</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Snapshot</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>TimerSnapshot<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание псевдонима для типа </span>\n\n<span class=\"token comment\">/**\n * [0] передача псевдонима Snapshot\n * в качестве третьего аргумента\n * базового типа.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot <span class=\"token comment\">/** [0] */</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">/**\n     * Поскольку Snapshot используется\n     * в тех конструкциях очерьдь до которых\n     * ещё не дошла, тело класса будет опущенно.\n     */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>TimerProps<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Ничего особенного на что стоило бы обратить внимание нет. Поэтому без лишних комментариев продолжим знакомство с внутренним устройством компонента - его жизненного цикла.</p><p class=\"content__paragraph\">Погружение в типизированный жизненный цикл классовых компонентов необходимо начать с его разделения на две части - <em>актуальный жизненный цикл</em> и <em>устаревший жизненный цикл</em>, который будет исключён из рассмотрения. Поскольку в аннотации методов жизненного цикла не содержится ничего, что было бы не понятно к этому моменту, пояснение каждого отдельного случая будет опущено. Обратить внимание стоит лишь на импорт впервые встречающегося типа <code>ErrorInfo</code> необходимость в котором появляется при определении необязательно метода <code>componentDidCatch</code>. Кроме того не будет лишнем напомнить, что в строгом, рекомендуемом режиме, при котором все элементы без аннотации неявно принадлежат к типу <code>any</code>, аннотация сигнатур методов является обязательной. И по этому случаю ещё раз стоит упомянуть о пользе коротких псевдонимов заменяющих огромные идентификаторы типов <code>*Props</code>, <code>*State</code> и <code>*Snapshot</code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">,</span> ErrorInfo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// необходимость в импорте типа ErrorInfo</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Вдобавок необходимо заметить, что код иллюстрирующий жизненный цикл компонента взять из декларации устанавливаемой из репозитория <code>@types/react</code> и именно поэтому она изобилует излишними преобразованиями в <code>Readonly&#x3C;T></code> тип. Но как было отмечено ранее, в этом нет нужны поскольку все типы составляющие троицу аргументов базового типа уже прошли преобразование при определении представляющих их псевдонимов. Учитывая этот факт предыдущий код будет выглядеть следующим образом. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Более компактная запись\n * без изменения поведения.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    \n    componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Следующий в очереди на рассмотрение механизм, получение ссылок на нативные <em>dom элементы</em> и <em>React компоненты</em>, обозначаемый как <em>рефы</em> (<em>refs</em>). </p><p class=\"content__paragraph\">Предположим что существует форма которую по событию <code>submit</code> необходимо очистить при помощи нативного метода <code>reset</code>, доступного лишь через нативный <em>dom элемент</em>, ссылку на который можно получить с помощью механизма рефов, применение которого возможно осуществить двумя способами. Первый способ заключается в создании объекта реф с помощью статического метода <code>React.createRef()</code>, а второй в самостоятельном сохранении ссылки на нативный <em>dom элемент</em> с помощью функции обратного вызова.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * задача заключается в\n * получении ссылки на\n * нативный dom елемент формы [0]. \n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Начнем по порядку. Первым делом необходимо определить поле (в нашем случае это <code>formRef</code>) необходимое для сохранения объекта реф и желательно чтобы оно было закрытое (<code>private</code>) и только для чтения (<code>readonly</code>). В примере поле <code>formRef</code> определен вместе с аннотацией в которой указан импортированный тип <code>RefObject&#x3C;T></code>, где параметр типа принимает тип нативного <em>dom элемента</em>, в нашем случае <code>HTMLFormElement</code>. Но в конкретном примере аннотация излишня поскольку мы указали выводу типов принадлежность нативного <em>dom элемента</em> передав его в качестве аргумента типа функции <code>React.createRef&#x3C;T>()</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token comment\">/**[1] */</span>                                   <span class=\"token comment\">/**[2] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа RefObject&lt;T>\n * который в аннотации [1] поля\n * formRef является излишним,\n * так как тип нативного dom элемента\n * был уточнен с помощь передачи его\n * в качестве аргумента типа функции [2]\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">На следующим шаге устанавливаем объект реф <em>react элементу</em> <code>&#x3C;form></code> и определяем закрытый метод <code>reset</code> в котором происходит вызов метода <code>reset</code> нативной формы. Не будет лишним обратить внимание, что вызов непосредственно метода <code>reset</code> осуществляется при помощи <em>оператора опциональной последовательности</em> (<code>?.</code>). Сделано это по причине возможного отсутствия ссылки на нативный элемент.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**[4] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">/**[5] */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token comment\">/**[3] */</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [3] установка рефа react элементу.\n * [4] определение закрытого метода.\n * [5] необходимость применения опрератора\n * опциональной последовательности по причине\n * возможного отстутствия ссылки на нативный элемент.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Второй способ получения ссылки на нативный элемент заключается в определении функции принимающей в качестве единственного параметра нативный <em>dom элемент</em>, сохранение ссылки на который перекладывается на разработчика.</p><p class=\"content__paragraph\">Для иллюстрации сказанного повторим предыдущий пример. Первым делом импортируем обобщенный тип <code>RefCallback&#x3C;T></code> описывающий функцию и принимающий в качестве аргумента типа тип нативного <em>dom элемента</em> который будет передан в функцию в качестве единственного аргумента. Затем определим поле <code>formNativeElement</code> с типом <code>union</code>, множество которого включат не только тип нативного элемента, но и <code>null</code>. Это необходимо поскольку при инициализации требуется установить значение принадлежащие к типу <code>null</code>. Это необходимо при активном флаге <code>--strictPropertyInitialization</code> входящим в группировку определяющую рекомендуемый строгий режим компилятора.</p><p class=\"content__paragraph\">Следующим шагом происходит определение закрытого только для чтения поля <code>formRefCallback</code> которому в качестве значения присвоена стрелочная функция. Единственный параметр данной функции лишен аннотации тпа, поскольку вывод типов определит его как принадлежащего к переданному в качестве аргумента типа <code>RefCallback&#x3C;T></code>. В теле данной функции происходит присваивание её параметра полю  <code>formNativeElement</code> определенному на предыдущем шаге.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                            <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefCallback<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[1] */</span>               <span class=\"token comment\">/**[2] */</span>     <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">/**[4] */</span>                    <span class=\"token comment\">/**[5] */</span>      <span class=\"token comment\">/**[6] */</span>                       <span class=\"token comment\">/**[7] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRefCallback<span class=\"token operator\">:</span> RefCallback<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> element <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа RefCallback&lt;T> который в качестве аргумента\n * типа ожидает тип нативного элемента.\n * [1] определение поля formNativeElement\n * и присвоение ему значения null [3], что приводит\n * к необходимости объединенного типа включающего\n * тип null [2]. [4] определение поля formRefCallback\n * значением которого служит стрелочная функция принимающая в\n * качестве единственного параметра нативный элемент [6] который затем\n * присваивается полю formNativeElement [7]. Тип этого параметра\n * будет принадлежать к типу переданному в качестве аргумента типа RefCallback&lt;T> [5]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стоит заметить что то же самое можно реализовать и без помощи типа импортированного <code>RefCallback&#x3C;T></code>. Для этого лишь потребуется самостоятельно добавить аннотацию типа для параметра функции обратного вызова. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">formRefCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> HTMLFormElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] определение поля formNativeElement\n * и присвоение ему значения null [2], что приводит\n * к необходимости объединенного типа включающего\n * тип null [1]. [3] определение поля formRefCallback\n * значением которого служит стрелочная функция в качестве\n * аргумента котороя ожидает нативный элемент [4] который\n * затем присваивается полю formNativeElement [5]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Выбор того или иного способа зависит лишь от предпочтений самого разработчика.</p><p class=\"content__paragraph\">Продолжим доведение примера до финального состояния и установим созданную в первом случае функцию обратного вызова <em>react элементу</em> <code>&#x3C;form></code> в качестве реф. Также определим уже известный метод <code>reset</code> в теле которого будет происходить вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылка на который будет сохранена в поле класса <code>formNativeElement</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> RefCallback<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Сhecklist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> formNativeElement<span class=\"token operator\">:</span> HTMLFormElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRefCallback<span class=\"token operator\">:</span> RefCallback<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> element <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/**[1] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/**[2] */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formNativeElement<span class=\"token operator\">?.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                            <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRefCallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] устанавливаем каллбэк в качестве занчения реф\n * после чего определяем метод reset [1] в теле которого\n * при помощи оператора опциональной последовательности\n * вызываем метод reset у нативного dom элемента сохранненого\n * в поле formNativeElement [2]\n * \n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">И раз уж тема дошла до рассмотрения рефов, то необходимо рассмотреть механизм получения с их помощью ссылки на классовый компонент. </p><p class=\"content__paragraph\">Первым делом определим классовый компонент <code>Slider</code> реализующий два открытых метода предназначенных для перелистывания контента <code>prev</code> и <code>next</code>. Далее определим компонент <code>App</code> в теле которого определим рефу при помощи функции <code>createRef</code> которой в качестве аргумента типа передадим тип классового компонента <code>Slider</code>. Таким образом вывод типа определит рефу <code>sliderRef</code> как принадлежащую к типу <code>RefObject&#x3C;Slider></code>. После этого в методе рендер создадим экземпляр компонента <code>Slider</code> и  два <em>react элемента</em> <code>&#x3C;button></code>, в обработчиках событий <code>click</code> которых происходит взаимодействие с компонентом <code>Slider</code> при помощи ссылки на него доступной через ассоциированную непосредственно с ним рефу.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> createRef<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Slider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">prev</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[0] */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**[1] */</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                     <span class=\"token comment\">/**[2]                 [3]*/</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> sliderRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Slider<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>prev<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[4] */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>Slider ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[5] */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>next<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**[6] */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] псевдо компонент Slider реализует\n * два доступных метода перелистывания контента\n * назад [0] и вперед [1]. Псевдо компонент App\n * определяет рефу с помощью универсальной функции\n * createRef в качестве аргумента типа которой был\n * установдлен тип компонента Slider. В методе render\n * происходит определение двух пользовательских кнопок\n * выполняющих перелистывание по событию click, в обработчиках\n * событий которых происходит вызов доступных методов prev [4]\n * и next [6] через рефу ассоциированную непосредственно с компонентом [5]\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">На этом рассмотрение работы с механизмом рефов в типизированном стиле завершено. Но до завершения знакомства с работой классового компонента в основе которого лежит <code>Component&#x3C;Props, State, Snapshot></code> осталась ещё одна тема, а именно работа с <em>React событиями</em>. Кроме того её освещение будет являться альтернативным решением задачи получения доступа к нативному элементу. Простыми словами реализуем вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылку на который будет получена из объекта события <code>submit</code>. Но поскольку данная тема была подробна рассмотрена в главе посвященной функциональным компонентам, здесь подробно будут освещены только моменты присущие исключительно классовым компонентам.</p><p class=\"content__paragraph\">Первым делом возвратим предыдущий пример в первоначальное состояние и добавим кнопку для отправки формы.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Далее нам потребуется определить закрытое поле только для чтения в качестве значения которого будет присвоена стрелочная функция способная сохранить контекст текущего экземпляра. В качестве типа данного поля укажем импортированный из пространства имен <em>React</em> ранее рассмотренный обобщенный тип <code>ReactEventHandler&#x3C;T></code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                              <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactEventHandler<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">/**[1] */</span>                         <span class=\"token comment\">/**[2] */</span>     <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                                    <span class=\"token comment\">/**[4] */</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импорт типа ReactEventHandler&lt;T>\n * представляющего слушателя события.\n * [1]  Определение закрытого неизменяемого\n * поля принадлежащего к функциональному \n * типу ReactEventHandler&lt;T>. [2] тип нативного\n * dom элемента определенного стандаротной\n * библиотекой. [3] единственный параметр\n * функции не нуждается в аннотации поскольку\n * вывод типа операется на ReactEventHandler&lt;T>.\n * [4] установка слушателя.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Для завершения примера осталось всего-навсего написать логику слушателя события <code>submit</code>, которая также повторяет пример из главы посвященной функциональным компонентам и поэтому подробных комментариев не будет.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0]</span>\n        <span class=\"token keyword\">let</span> form <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target <span class=\"token keyword\">as</span> HTMLFormElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n        form<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] для предотвращения отправки формы\n * и перезагрузки страницы прерываем стандартное\n * поведение. [1] поскольку доступ к форме можно\n * получить через ссылку свойства target принадлежащего\n * к типу EventTarget, появляется необходимость в\n * приведении к типу HTMLFormElement с при помощи оператора as.\n * [2] вызываем метод reset.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Данный способ типизирования слушателей событий является предпочтительным поскольку при таком подходе аннотация включает только два типа и кроме того, стрелочная функция уберегает от неминуемой потери контекста. Случаи требующие определения слушателя как метода класса требуют другого подхода. Отличие заключается в том что в аннотировании типа нуждается непосредственно параметр слушателя. Но поскольку <em>React</em> делегирует все нативные события, необходимо импортировать тип соответствующего события из его пространства имен. Для событий связанных с формами в <em>React</em> определен обобщенный тип <code>FormEvent&#x3C;T></code> ожидающий в качестве аргумента типа тип нативного элемента. И поскольку слушатель ничего не возвращает, то тип возвращаемого значения, явное указание которого излишне, определяется как <code>void</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">                            <span class=\"token comment\">/**[0] */</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> FormEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**[1] */</span>                          <span class=\"token comment\">/**[2] */</span>        <span class=\"token comment\">/**[3] */</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] импортируем тип FormEvent&lt;T> после \n * чего определяем метод form_submitHandler\n * тип единственного параметра которого определен\n * как FormEvent&lt;HTMLFormElement>, а возвращаемое\n * значение [3] которое указанно лишь для того, чтобы\n * напомнить об отсутствии необходимости в его явном указании.\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Поскольку установка слушателя представляемого методом класса приведет к неминуемой потери контекста, прибегать к подобному объявлению стоит только при условии что их тело лишено логики предполагающей обращение к членам через ссылку экземпляра <code>this</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Здесь нельзя обращаться к this\n         * поскольку контекст на текущий экземпляр\n         * был утерян.\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Контекст можно было бы сохранить прибегнув к методу <code>bind</code> или делегированию события непосредственно с помощью стрелочной функции определенной в месте установки слушателя, но зачем? Для <code>bind</code> потребуется определения дополнительного поля.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// дополнительное поле</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">form_submitHandlerBinded</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span>Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// лишняя инициализация</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandlerBinded <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Теперь здесь можно обращатся к this\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// в качестве слушателя установлена функция связанная с помощью bind</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandlerBinded<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стрелочная функция будет пересоздаваться каждую отрисовку.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FormEvent<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Теперь здесь можно обращатся к this\n         */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// пересоздание функции каждую отрисовку</span>\n            <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">form_submitHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того оба случая затрудняют понимание кода. Поэтому необходимо повторить что использовать метод класса в качестве слушателя события стоит только при отсутствии необходимости в обращении через ссылку <code>this</code>. При возникновении именно такого случая не будет лишним уточнения способа выбора типа события. В приведенном примере это был <code>FormEvent&#x3C;T></code>, поскольку работа производилась с формой. Для других событий появится необходимость в других соответствующих типа, узнать которые можно с помощью подсказок вашей <em>ide</em>. Для чего всего-лишь необходимо навести курсор на определение слушателя события.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clicker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token comment\">/**[0] */</span>\n            <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [0] при наведении курсором\n * на определение слушателя onClick\n * ide подсказывает тип как MouseEvent&lt;HTMLDivElement>\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также не забываем об упомянутом ранее базовом для всех событийных  <em>React</em> типов обобщенном типе <code>SyntheticEvent&#x3C;T></code>, который в качестве аргумента ожидает тип представляющий нативный элемент.</p><p class=\"content__paragraph\">На этом тему посвященную созданию классового компонента расширяющего <code>Component&#x3C;Props, State, Snapshot></code> можно заканчивать и переходить к следующей теме. Единственное что точно не будет лишним, так это собрать весь пройденный материал в одном месте.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">,</span> ReactNode<span class=\"token punctuation\">,</span> ReactEventHandler<span class=\"token punctuation\">,</span> RefObject<span class=\"token punctuation\">,</span> SyntheticEvent<span class=\"token punctuation\">,</span> ErrorInfo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterDefaultProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации свойств по умолчанию</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GreeterDefaultProps</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> ReactNode <span class=\"token operator\">|</span> ReactNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// указываем что children могут принадледжать к единичному типу или множеству составляющего тип ReactNode</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации обязательных свойств + экспорт интерфейса</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterState</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации состояния</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GreeterSnapshot</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// для декларации снимка</span>\n\n<span class=\"token comment\">// создаем псевдонимы для readonly типов представляющих...</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DefaultProps</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterDefaultProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... статическое поле defaultProps</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... поле props</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... поле state</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Snapshot</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>GreeterSnapshot<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... параметр snapshot определенный в нескольких методах жизненного цикла</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> defaultProps<span class=\"token operator\">:</span> DefaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// модификатор readonly от случайного изменения статического поля defaultProps которое должно иметь модификатор доступа public</span>\n\n\n    <span class=\"token comment\">// необязательные методы класса (статические методы)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> getDerivedStateFromProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> getDerivedStateFromError<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Partial<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// модификатор readonly от случайного изменения поля state которое должно иметь модификатор доступа public</span>\n\n\n    <span class=\"token comment\">/** два различных способа получения ссылки на нативный dom элемент */</span>\n    <span class=\"token comment\">// [0] при помощи контейнера</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> formRef<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// создание объекта RefObject, с помощью которого будет получена ссылка на dom элемент</span>\n    \n    <span class=\"token comment\">// [1] при помощи каллбэка</span>\n    <span class=\"token keyword\">private</span> textRef<span class=\"token operator\">:</span> HTMLSpanElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// поле, в которое будет сохранена ссылка на DOM-элемент</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">textRefCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> HTMLSpanElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textRef <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span> <span class=\"token comment\">// определение функции обратного вызова для установления ссылки на DOM-элемент</span>\n\n\n\n    <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">// методы жизненного цикла</span>\n    <span class=\"token keyword\">public</span> componentDidMount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n    <span class=\"token keyword\">public</span> shouldComponentUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> nextState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> nextContext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentWillUnmount<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentDidCatch<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> getSnapshotBeforeUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Snapshot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> componentDidUpdate<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> snapshot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Snapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">/** два варианта определения слушателя событий */</span>\n    <span class=\"token comment\">// слушатель событий определенный как поле</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> form_submitHandler<span class=\"token operator\">:</span> ReactEventHandler<span class=\"token operator\">&lt;</span>HTMLFormElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// изменение состояния</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> prevProps<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// слушаетль событий определенный как метод</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">submiteButton_clickHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> SyntheticEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>form ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formRef<span class=\"token punctuation\">}</span> onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form_submitHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>span ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textRefCallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Send form<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submiteButton_clickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>yes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"Производные от PureComponent<Props, State, Snapshot>\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"proizvodnye ot purecomponent<props, state, snapshot>\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Производные от PureComponent&#x3C;Props, State, Snapshot></span></h2><p class=\"content__paragraph\">Помимо того, что пользовательские компоненты могут быть производными от универсального класс <code>Component&#x3C;Props, State, Snapshot></code>, они также могут использовать в качестве базового класса универсальный класс <code>PureComponent&#x3C;Props, State, Snapshot></code>. Но поскольку все что было сказано относительно <code>Component</code> в ста процентах случаев верно и для <code>PureComponent</code>, который также ничего нового не привносит, то данная глава будет ограничена лишь кодом иллюстрирующим определение пользовательского компонента.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> PureComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**[*] */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Snapshot<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**[*] */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * [*] здесь предполагается логика\n * рассмотренная рассотренная в главе\n * посвященной производным от Component&lt;P, S, SS>\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тем кто только начал своё знакомство с классовыми компонентами с данной главы необходимо вернутся на шаг назад или даже более разумно в самое начало, поскольку именно там объясняется что для полного понимания необходимо ознакомиться со всем материалом относящимся к <em>React</em>.</p></section>","commitInfoAll":[{"committedDate":"2020-09-28T13:27:58Z","message":"book(изменение): rethink chapter 050\n\nrethink chapter 050","messageHeadline":"book(изменение): rethink chapter 050","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/050\\.\\(React\\) Классовые компоненты/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"Что такое и для чего нужен TypeScript","sections":[{"name":"Что такое TypeScript","path":"Что такое TypeScript"},{"name":"История TypeScript","path":"История TypeScript"},{"name":"Для чего нужен TypeScript","path":"Для чего нужен TypeScript"},{"name":"Зачем разработчику TypeScript","path":"Зачем разработчику TypeScript"}]},{"name":"Вступление","path":"Вступление","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"Система типов, тип данных, значимые и ссылочные типы","sections":[{"name":"Система Типов","path":"Система Типов"},{"name":"Тип данных (тип)","path":"Тип данных (тип)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"Тип данных, передающийся по значению (примитивный тип)"},{"name":"Тип данных, передающийся по ссылке","path":"Тип данных, передающийся по ссылке"}]},{"name":"Связывание, типизация, вывод типов","path":"Связывание, типизация, вывод типов","sections":[{"name":"Обработка кода компилятором","path":"Обработка кода компилятором"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"Лексический анализ (токенизация - tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"Синтаксический анализ (разбор - parsing)"},{"name":"Семантический анализ","path":"Семантический анализ"},{"name":"Связывание (Binding)","path":"Связывание (Binding)"},{"name":"Типизация","path":"Типизация"},{"name":"Вывод Типов (type inference)","path":"Вывод Типов (type inference)"}]},{"name":"Преобразование типов","path":"Преобразование типов","sections":[{"name":"Неявные Преобразования","path":"Неявные Преобразования"},{"name":"Явные Преобразования","path":"Явные Преобразования"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"Типизированные и нетипизированные языки программирования","sections":[{"name":"Нетипизированные языки","path":"Нетипизированные языки"},{"name":"Типизированные языки","path":"Типизированные языки"}]},{"name":"Статическая и динамическая типизация","path":"Статическая и динамическая типизация","sections":[{"name":"Статическая типизация (Static Typing)","path":"Статическая типизация (Static Typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"Динамическая Типизация (Dynamic Typing)"}]},{"name":"Сильная и слабая типизация","path":"Сильная и слабая типизация","sections":[{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Слабая типизация (weakly typed)","path":"Слабая типизация (weakly typed)"}]},{"name":"Явная и неявная типизация","path":"Явная и неявная типизация","sections":[{"name":"Явная типизация (explicit typing)","path":"Явная типизация (explicit typing)"},{"name":"Неявная типизация (implicit typing)","path":"Неявная типизация (implicit typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"Совместимость типов на основе вида типизации","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"Совместимость типов (Types Compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"Номинативная Типизация (nominative typing)"},{"name":"Структурная Типизация (structural typing)","path":"Структурная Типизация (structural typing)"},{"name":"Утиная Типизация (Duck typing)","path":"Утиная Типизация (Duck typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"Совместимость типов на основе вариантности","sections":[{"name":"Вариантность","path":"Вариантность"},{"name":"Иерархия наследования","path":"Иерархия наследования"},{"name":"Ковариантность","path":"Ковариантность"},{"name":"Контравариантность","path":"Контравариантность"},{"name":"Инвариантность","path":"Инвариантность"},{"name":"Бивариантность","path":"Бивариантность"}]},{"name":"Аннотация Типов","path":"Аннотация Типов","sections":[{"name":"Аннотация Типов - общее","path":"Аннотация Типов - общее"},{"name":"Аннотация типа","path":"Аннотация типа"},{"name":"Синтаксические конструкции var, let, const","path":"Синтаксические конструкции var, let, const"},{"name":"Функции (function)","path":"Функции (function)"},{"name":"Стрелочные Функции (arrow function)","path":"Стрелочные Функции (arrow function)"},{"name":"Классы (class)","path":"Классы (class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"Сравнение Синтаксиса TypeScript и JavaScript"},{"name":"Итог","path":"Итог"}]},{"name":"Базовый Тип Any","path":"Базовый Тип Any","sections":[{"name":"Any (any) произвольный тип","path":"Any (any) произвольный тип"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"Примитивные типы Number, String, Boolean, Symbol, BigInt","sections":[{"name":"Важно","path":"Важно"},{"name":"Number (number) примитивный числовой тип","path":"Number (number) примитивный числовой тип"},{"name":"String (string) примитивный строковый тип","path":"String (string) примитивный строковый тип"},{"name":"Boolean (boolean) примитивный логический тип","path":"Boolean (boolean) примитивный логический тип"},{"name":"Symbol (symbol) примитивный символьный тип","path":"Symbol (symbol) примитивный символьный тип"},{"name":"BigInt (bigint) примитивный числовой тип","path":"BigInt (bigint) примитивный числовой тип"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"Примитивные типы Null, Undefined, Void, Never, Unknown","sections":[{"name":"Важно","path":"Важно"},{"name":"Null (null) примитивный null тип","path":"Null (null) примитивный null тип"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"Undefined (undefined) примитивный неопределенный тип"},{"name":"Void (void) отсутствие конкретного типа","path":"Void (void) отсутствие конкретного типа"},{"name":"Never (never) примитивный тип","path":"Never (never) примитивный тип"},{"name":"Unknown (unknown)","path":"Unknown (unknown)"}]},{"name":"Примитивный Тип Enum","path":"Примитивный Тип Enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"Enum (enum) примитивный перечисляемый тип"},{"name":"Перечисления с числовым значением","path":"Перечисления с числовым значением"},{"name":"Перечисления со строковым значением","path":"Перечисления со строковым значением"},{"name":"Смешанное перечисление (mixed enum)","path":"Смешанное перечисление (mixed enum)"},{"name":"Перечисление в качестве типа данных","path":"Перечисление в качестве типа данных"},{"name":"Перечисление const с числовым и строковым значением","path":"Перечисление const с числовым и строковым значением"},{"name":"Когда стоит применять enum?","path":"Когда стоит применять enum?"}]},{"name":"Типы - Union, Intersection","path":"Типы - Union, Intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"Тип Объединение (Union Types)"},{"name":"Тип Пересечение (Intersection Type)","path":"Тип Пересечение (Intersection Type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"Type Queries (запросы типа), Alias (псевдонимы типа)","sections":[{"name":"Запросы Типа (Type Queries)","path":"Запросы Типа (Type Queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"Псевдонимы Типов (Type Aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"Литеральный тип Number (Numeric Literal Types)"},{"name":"Литеральный тип String (String Literal Types)","path":"Литеральный тип String (String Literal Types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"Шаблонный литеральный тип String (Template String Literal Types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"Литеральный Тип Boolean (Boolean Literal Types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"Литеральный тип Enum (Enum Literal Types)"}]},{"name":"Object, Array, Tuple","path":"Object, Array, Tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"Object (object) — ссылочный объектный тип"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"Array (type[]) ссылочный массивоподобный тип"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"Tuple ([T0, T1, …, Tn]) тип кортеж"}]},{"name":"Function, Functional Types","path":"Function, Functional Types","sections":[{"name":"Function Types - тип функция","path":"Function Types - тип функция"},{"name":"Functional Types - функциональный тип","path":"Functional Types - функциональный тип"},{"name":"this в сигнатуре функции","path":"this в сигнатуре функции"}]},{"name":"Interfaces","path":"Interfaces","sections":[{"name":"Общая теория","path":"Общая теория"},{"name":"Интерфейс в TypeScript","path":"Интерфейс в TypeScript"},{"name":"Объявление (declaration)","path":"Объявление (declaration)"},{"name":"Конвенции именования интерфейсов","path":"Конвенции именования интерфейсов"},{"name":"Реализация интерфейса (implements)","path":"Реализация интерфейса (implements)"},{"name":"Декларация свойств get и set (accessors)","path":"Декларация свойств get и set (accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"Указание интерфейса в качестве типа (interface types)"},{"name":"Расширение интерфейсов (extends interface)","path":"Расширение интерфейсов (extends interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"Расширение интерфейсом класса (extends class)"},{"name":"Описание класса (функции-конструктора)","path":"Описание класса (функции-конструктора)"},{"name":"Описание функционального выражения","path":"Описание функционального выражения"},{"name":"Описание индексных членов в объектных типов","path":"Описание индексных членов в объектных типов"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"Инлайн интерфейсы (Inline Interface)"},{"name":"Слияние интерфейсов","path":"Слияние интерфейсов"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"Индексные члены (определение динамических ключей)"},{"name":"Строгая проверка при обращении к динамическим ключам","path":"Строгая проверка при обращении к динамическим ключам"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"Модификаторы доступа (Access Modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"Модификатор доступа public (публичный)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"Модификатор доступа private (закрытый или скрытый)"},{"name":"Модификатор доступа protected (защищенный)","path":"Модификатор доступа protected (защищенный)"},{"name":"Модификаторы доступа и конструкторы класса","path":"Модификаторы доступа и конструкторы класса"},{"name":"Быстрое объявление полей","path":"Быстрое объявление полей"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"Закрытые поля определенные спецификацией ECMAScript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"Нативный закрытый (private) модификатор доступа"}]},{"name":"Абстрактные классы (abstract classes)","path":"Абстрактные классы (abstract classes)","sections":[{"name":"Общие характеристики","path":"Общие характеристики"},{"name":"Теория","path":"Теория"}]},{"name":"Полиморфный тип this","path":"Полиморфный тип this","sections":[{"name":"this - как тип","path":"this - как тип"}]},{"name":"Модификатор readonly (только для чтения)","path":"Модификатор readonly (только для чтения)","sections":[{"name":"Модификатор readonly","path":"Модификатор readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"Definite Assignment Assertion Modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"Модификатор утверждения не принадлежности значения к типу undefined"}]},{"name":"Классы — Тонкости","path":"Классы — Тонкости","sections":[{"name":"Классы - Тонкости implements","path":"Классы - Тонкости implements"},{"name":"Частичное слияние интерфейса с классом","path":"Частичное слияние интерфейса с классом"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"Переопределение свойств полями и наоборот при наследовании"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","sections":[{"name":"Нюансы на практике","path":"Нюансы на практике"}]},{"name":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","path":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","sections":[{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"Оператор ! (Non-Null and Non-Undefined Operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"Оператор ! (Definite Assignment Assertion)"}]},{"name":"Обобщения (Generics)","path":"Обобщения (Generics)","sections":[{"name":"Обобщения - общие понятия","path":"Обобщения - общие понятия"},{"name":"Обобщения в TypeScript","path":"Обобщения в TypeScript"},{"name":"Параметры типа - extends (generic constraints)","path":"Параметры типа - extends (generic constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"Параметра типа - значение по умолчанию = (generic parameter defaults)"},{"name":"Параметры типа - как тип данных","path":"Параметры типа - как тип данных"}]},{"name":"Дискриминантное объединение (Discriminated Union)","path":"Дискриминантное объединение (Discriminated Union)","sections":[{"name":"Дискриминантное объединение","path":"Дискриминантное объединение"}]},{"name":"Импорт и экспорт только типа","path":"Импорт и экспорт только типа","sections":[{"name":"Предыстория возникновения import type и export type","path":"Предыстория возникновения import type и export type"},{"name":"import type и export type - форма объявления","path":"import type и export type - форма объявления"},{"name":"Импорт и экспорт только типа на практике","path":"Импорт и экспорт только типа на практике"},{"name":"Вспомогательный флаг --importsNotUsedAsValues","path":"Вспомогательный флаг --importsNotUsedAsValues"}]},{"name":"Утверждение типов (Type Assertion)","path":"Утверждение типов (Type Assertion)","sections":[{"name":"Утверждение типов - общее","path":"Утверждение типов - общее"},{"name":"Утверждение типа <Type> синтаксис","path":"Утверждение типа <Type> синтаксис"},{"name":"Утверждение типа с помощью оператора as","path":"Утверждение типа с помощью оператора as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"Приведение (утверждение) к константе (const assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Утверждение в сигнатуре (Signature Assertion)"}]},{"name":"Защитники типа","path":"Защитники типа","sections":[{"name":"Защитники Типа - общее","path":"Защитники Типа - общее"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"Сужение диапазона множества типов на основе типа данных"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"Сужение диапазона множества типов на основе доступных членов объекта"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"Сужение диапазона множества типов на основе функции, определенной пользователем"}]},{"name":"Вывод типов","path":"Вывод типов","sections":[{"name":"Вывод типов - общие сведения","path":"Вывод типов - общие сведения"},{"name":"Вывод примитивных типов","path":"Вывод примитивных типов"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)"},{"name":"Вывод объектных типов","path":"Вывод объектных типов"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"Вывод типа для полей класса на основе инициализации их в конструкторе"},{"name":"Вывод объединенных (Union) типов","path":"Вывод объединенных (Union) типов"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"Вывод пересечения (Intersection) с дискриминантными полями"},{"name":"Вывод типов кортеж (Tuple)","path":"Вывод типов кортеж (Tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"Совместимость объектных типов (Compatible Object Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость объектных типов в TypeScript","path":"Совместимость объектных типов в TypeScript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"Совместимость функциональных типов (Compatible Function Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость параметров","path":"Совместимость параметров"},{"name":"Совместимость возвращаемого значения","path":"Совместимость возвращаемого значения"}]},{"name":"Совместимость объединений (Union Types)","path":"Совместимость объединений (Union Types)","sections":[{"name":"Совместимость","path":"Совместимость"}]},{"name":"Типизация в TypeScript","path":"Типизация в TypeScript","sections":[{"name":"Общие сведения","path":"Общие сведения"},{"name":"Статическая типизация (static typing)","path":"Статическая типизация (static typing)"},{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"Явно типизированный (explicit typing) с выводом типов (type inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)"},{"name":"Вариантность (variance)","path":"Вариантность (variance)"},{"name":"Наилучший общий тип (Best common type)","path":"Наилучший общий тип (Best common type)"},{"name":"Контекстный тип (Contextual Type)","path":"Контекстный тип (Contextual Type)"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","sections":[{"name":"Запрос ключей keyof","path":"Запрос ключей keyof"},{"name":"Поиск типов (Lookup Types)","path":"Поиск типов (Lookup Types)"},{"name":"Сопоставление типов (Mapped Types)","path":"Сопоставление типов (Mapped Types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"Префиксы + и - в сопоставленных типах"}]},{"name":"Условные типы (Conditional Types)","path":"Условные типы (Conditional Types)","sections":[{"name":"Условные типы на практике","path":"Условные типы на практике"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"Распределительные условные типы (Distributive Conditional Types)"},{"name":"Вывод типов в условном типе","path":"Вывод типов в условном типе"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"Readonly, Partial, Required, Pick, Record","sections":[{"name":"Readonly<T> (сделать члены объекта только для чтения)","path":"Readonly<T> (сделать члены объекта только для чтения)"},{"name":"Partial<T> (сделать все члены объекта необязательными)","path":"Partial<T> (сделать все члены объекта необязательными)"},{"name":"Required<T> (сделать все необязательные члены обязательными)","path":"Required<T> (сделать все необязательные члены обязательными)"},{"name":"Pick (отфильтровать объектный тип)","path":"Pick (отфильтровать объектный тип)"},{"name":"Record<K, T> (динамически определить поле в объектном типе)","path":"Record<K, T> (динамически определить поле в объектном типе)"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","sections":[{"name":"Exclude<T, U> (исключает из T признаки присущие U)","path":"Exclude<T, U> (исключает из T признаки присущие U)"},{"name":"Extract<T, U> (общие для двух типов признаки)","path":"Extract<T, U> (общие для двух типов признаки)"},{"name":"NonNullable<T> (удаляет типы null и undefined)","path":"NonNullable<T> (удаляет типы null и undefined)"},{"name":"ReturnType<T> (получить тип значения возвращаемого функцией)","path":"ReturnType<T> (получить тип значения возвращаемого функцией)"},{"name":"InstanceType<T> (получить через тип класса тип его экземпляра)","path":"InstanceType<T> (получить через тип класса тип его экземпляра)"},{"name":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)","path":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)"},{"name":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)","path":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)"},{"name":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)","path":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","sections":[{"name":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)","path":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)"},{"name":"ReadonlyArray<T> (неизменяемый массив)","path":"ReadonlyArray<T> (неизменяемый массив)"},{"name":"ReadonlyMap<K, V> (неизменяемая карта)","path":"ReadonlyMap<K, V> (неизменяемая карта)"},{"name":"ReadonlySet<T> (неизменяемое множество)","path":"ReadonlySet<T> (неизменяемое множество)"}]},{"name":"Синтаксические конструкции и операторы","path":"Синтаксические конструкции и операторы","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)"},{"name":"Операнды для delete должны быть необязательными","path":"Операнды для delete должны быть необязательными"}]},{"name":"Типизированный React","path":"Типизированный React","sections":[{"name":"Расширение .tsx","path":"Расширение .tsx"}]},{"name":"Функциональные компоненты","path":"Функциональные компоненты","sections":[{"name":"Определение компонента как Function Declaration","path":"Определение компонента как Function Declaration"},{"name":"Определение компонента как Function Expression","path":"Определение компонента как Function Expression"}]},{"name":"Классовые компоненты","path":"Классовые компоненты","sections":[{"name":"Производные от Component<P, S, SS>","path":"Производные от Component<P, S, SS>"},{"name":"Производные от PureComponent<Props, State, Snapshot>","path":"Производные от PureComponent<Props, State, Snapshot>"}]},{"name":"Универсальные компоненты","path":"Универсальные компоненты","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"Обобщенные компоненты (Generics Component)"}]},{"name":"Типизированные хуки","path":"Типизированные хуки","sections":[{"name":"Предопределенные хуки - useState<T>()","path":"Предопределенные хуки - useState<T>()"},{"name":"Предопределенные хуки - useEffect() и useLayoutEffect()","path":"Предопределенные хуки - useEffect() и useLayoutEffect()"},{"name":"Предопределенные хуки - useContext<T>()","path":"Предопределенные хуки - useContext<T>()"},{"name":"Предопределенные хуки - useReducer<R>()","path":"Предопределенные хуки - useReducer<R>()"},{"name":"Предопределенные хуки - useCallback<T>()","path":"Предопределенные хуки - useCallback<T>()"},{"name":"Предопределенные хуки - useRef<T>()","path":"Предопределенные хуки - useRef<T>()"},{"name":"Предопределенные хуки - useImperativeHandle<T, R>()","path":"Предопределенные хуки - useImperativeHandle<T, R>()"},{"name":"Предопределенные хуки - useMemo<T>()","path":"Предопределенные хуки - useMemo<T>()"},{"name":"Предопределенные хуки - useDebugValue<T>()","path":"Предопределенные хуки - useDebugValue<T>()"},{"name":"Пользовательский хук","path":"Пользовательский хук"}]},{"name":"Контекст (Context)","path":"Контекст (Context)","sections":[{"name":"Определение контекста","path":"Определение контекста"}]},{"name":"HOC (Higher-Order Components)","path":"HOC (Higher-Order Components)","sections":[{"name":"Определение hoc","path":"Определение hoc"},{"name":"Определение hoc на основе функционального компонента","path":"Определение hoc на основе функционального компонента"},{"name":"Определение hoc на основе классового компонента","path":"Определение hoc на основе классового компонента"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"Пространства имен (namespace) и модули (module)","sections":[{"name":"Namespace и module — предназначение","path":"Namespace и module — предназначение"},{"name":"Namespace - определение","path":"Namespace - определение"},{"name":"Модули (export, import) — определение","path":"Модули (export, import) — определение"},{"name":"Конфигурирование проекта","path":"Конфигурирование проекта"}]},{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения","sections":[{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"Сборка проекта с помощью tsc (TypeScript compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"Сборка с использованием ссылок на проекты","sections":[{"name":"Ссылки на проекты","path":"Ссылки на проекты"}]},{"name":"Декларации","path":"Декларации","sections":[{"name":"Что такое декларация (Declaration)","path":"Что такое декларация (Declaration)"},{"name":"Установка деклараций с помощью @types","path":"Установка деклараций с помощью @types"},{"name":"Подготовка к созданию декларации","path":"Подготовка к созданию декларации"},{"name":"Разновидности деклараций","path":"Разновидности деклараций"},{"name":"Декларации и область видимости","path":"Декларации и область видимости"},{"name":"Декларации для библиотек с одной точкой входа","path":"Декларации для библиотек с одной точкой входа"},{"name":"Декларации для библиотек с множеством точек входа","path":"Декларации для библиотек с множеством точек входа"},{"name":"Создание деклараций вручную","path":"Создание деклараций вручную"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"Директива с тройным слешем (triple-slash directives)"},{"name":"Импортирование декларации (import)","path":"Импортирование декларации (import)"}]},{"name":"Публикация TypeScript","path":"Публикация TypeScript","sections":[{"name":"Публикация","path":"Публикация"}]},{"name":"Опции компилятора","path":"Опции компилятора","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressExcessPropertyErrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressImplicitAnyIndexErrors"},{"name":"noImplicitAny","path":"noImplicitAny"},{"name":"checkJs","path":"checkJs"},{"name":"JSX","path":"JSX"},{"name":"jsxFactory","path":"jsxFactory"},{"name":"target (t)","path":"target (t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysStrict"},{"name":"strictNullChecks","path":"strictNullChecks"},{"name":"stripInternal","path":"stripInternal"},{"name":"noImplicitThis","path":"noImplicitThis"},{"name":"noImplicitUseStrict","path":"noImplicitUseStrict"},{"name":"baseUrl","path":"baseUrl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootDir"},{"name":"rootDirs","path":"rootDirs"},{"name":"traceResolution","path":"traceResolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"noLib"},{"name":"noResolve","path":"noResolve"},{"name":"noStrictGenericChecks","path":"noStrictGenericChecks"},{"name":"preserveConstEnums","path":"preserveConstEnums"},{"name":"removeComments","path":"removeComments"},{"name":"noUnusedLocals","path":"noUnusedLocals"},{"name":"noUnusedParameters","path":"noUnusedParameters"},{"name":"skipLibCheck","path":"skipLibCheck"},{"name":"declarationDir","path":"declarationDir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeRoots"},{"name":"allowUnusedLabels","path":"allowUnusedLabels"},{"name":"noImplicitReturns","path":"noImplicitReturns"},{"name":"noFallthroughCasesInSwitch","path":"noFallthroughCasesInSwitch"},{"name":"outFile","path":"outFile"},{"name":"allowSyntheticDefaultImports","path":"allowSyntheticDefaultImports"},{"name":"allowUnreachableCode","path":"allowUnreachableCode"},{"name":"allowJs","path":"allowJs"},{"name":"reactNamespace","path":"reactNamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleResolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noEmitHelpers"},{"name":"newLine","path":"newLine"},{"name":"inlineSourceMap","path":"inlineSourceMap"},{"name":"inlineSources","path":"inlineSources"},{"name":"noEmitOnError","path":"noEmitOnError"},{"name":"noEmit","path":"noEmit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downlevelIteration"},{"name":"emitBOM","path":"emitBOM"},{"name":"emitDecoratorMetadata","path":"emitDecoratorMetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceConsistentCasingInFileNames"},{"name":"help (h)","path":"help (h)"},{"name":"importHelpers","path":"importHelpers"},{"name":"isolatedModules","path":"isolatedModules"},{"name":"listEmittedFiles","path":"listEmittedFiles"},{"name":"listFiles","path":"listFiles"},{"name":"sourceRoot","path":"sourceRoot"},{"name":"mapRoot","path":"mapRoot"},{"name":"maxNodeModuleJsDepth","path":"maxNodeModuleJsDepth"},{"name":"project (p)","path":"project (p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version (v)"},{"name":"watch (w)","path":"watch (w)"},{"name":"preserveSymlinks","path":"preserveSymlinks"},{"name":"strictFunctionTypes","path":"strictFunctionTypes"},{"name":"locale","path":"locale"},{"name":"strinctPropertyInitialization","path":"strinctPropertyInitialization"},{"name":"esModuleInterop","path":"esModuleInterop"},{"name":"emitDeclarationsOnly","path":"emitDeclarationsOnly"},{"name":"resolveJsonModule","path":"resolveJsonModule"},{"name":"declarationMap","path":"declarationMap"},{"name":"strictBindCallApply","path":"strictBindCallApply"},{"name":"showConfig","path":"showConfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsBuildInfoFile"},{"name":"allowUmdGlobalAccess","path":"allowUmdGlobalAccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disableSourceOfProjectReferenceRedirect"},{"name":"useDefineForClassFields","path":"useDefineForClassFields"},{"name":"importsNotUsedAsValues","path":"importsNotUsedAsValues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumeChangesOnlyAffectDirectDependencies"},{"name":"watchFile","path":"watchFile"},{"name":"watchDirectory","path":"watchDirectory"},{"name":"fallbackPolling","path":"fallbackPolling"},{"name":"synchronousWatchDirectory","path":"synchronousWatchDirectory"},{"name":"noUncheckedIndexedAccess","path":"noUncheckedIndexedAccess"}]}]}},"staticQueryHashes":["408059355","63159454"]}