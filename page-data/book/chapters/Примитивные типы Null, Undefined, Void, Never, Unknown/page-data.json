{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/Примитивные типы Null, Undefined, Void, Never, Unknown","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Примитивные типы Null, Undefined, Void, Never, Unknown","section":"Типы","path":"primitivnye tipy null, undefined, void, never, unknown","subtitles":[{"subtitle":"Важно","path":"primitivnye tipy null, undefined, void, never, unknown#vajno"},{"subtitle":"Null (null) примитивный null тип","path":"primitivnye tipy null, undefined, void, never, unknown#null (null) primitivnyi null tip"},{"subtitle":"Undefined (undefined) примитивный неопределенный тип","path":"primitivnye tipy null, undefined, void, never, unknown#undefined (undefined) primitivnyi neopredelennyi tip"},{"subtitle":"Void (void) отсутствие конкретного типа","path":"primitivnye tipy null, undefined, void, never, unknown#void (void) otsutstvie konkretnogo tipa"},{"subtitle":"Never (never) примитивный тип","path":"primitivnye tipy null, undefined, void, never, unknown#never (never) primitivnyi tip"},{"subtitle":"Unknown (unknown)","path":"primitivnye tipy null, undefined, void, never, unknown#unknown (unknown)"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Примитивные типы Null, Undefined, Void, Never, Unknown</span></h1><p class=\"content__paragraph\">Настало время рассмотреть следующую порцию типов некоторые из которых являются уникальными для <em>TypeScript</em>.</p></section>\n<section class=\"content__section\" id=\"Важно\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"vajno\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Важно</span></h2><p class=\"content__paragraph\">Прежде чем приступить к знакомству с такими типами, как <code>Null</code>, <code>Undefined</code>, <code>Void</code>, <code>Never</code> и <code>Unknown</code>, стоит обговорить одну очень важную деталь. Дело в том, что все перечисленные типы можно указывать в качестве типа всем конструкциям, которые это позволяют. То есть, типом данных <code>null</code> можно аннотировать даже переменную (<code>let identifier: null</code>). Данная книга будет изобиловать подобными примерами, так как эта возможность облегчает демонстрацию совместимости типов. Но при этом стоит понимать, что проделывать подобное в реальном коде противопоказано.</p></section>\n<section class=\"content__section\" id=\"Null (null) примитивный null тип\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"null (null) primitivnyi null tip\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Null (null) примитивный null тип</span></h2><p class=\"content__paragraph\">Примитивный тип <code>Null</code> служит обозначением <em>“ничего”</em>. </p><p class=\"content__paragraph\">Тип <code>Null</code> указывается с помощью ключевого слова <code>null</code> (не путать с единственным литеральным значением <code>null</code> типа <code>Null</code>, которое присваивается в качестве значения).</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null, указанный после оператора двоеточия, это имеющийся только в TypeScript псевдоним (alias) для глобального типа Null. В то время как null, указанный после оператора присваивания, это единственное значение типа Null.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>Null</code> является подтипом всех типов, за исключением типа <code>Undefined</code>, поэтому его единственное значение <code>null</code> совместимо со всеми остальными типами данных.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В то время как тип <code>null</code> совместим со всеми типами, помимо него самого, с ним самим совместим лишь тип <code>undefined</code> и <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тогда, когда тип данных указывается не явно, а в качестве значения используется значение <code>null</code>, вывод типов определяет принадлежность к типу <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// identifier: any</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Создатели <em>TypeScript</em> во избежание ошибок возникающих при операциях в которых вместо ожидаемого значения возможно значение <code>null</code>, рекомендуют вести разработку с активным флагом <code>--strictNullChecks</code>. При активном флаге <code>--strictNullChecks</code> тип <code>null</code> является подтипом только одного типа <code>any</code>. Это в свою очередь означает, что значение <code>null</code> может быть совместимо только с типами <code>any</code> и <code>null</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При активном флаге <code>--strictNullChecks</code>, при условии что в качестве значения выступает значение <code>null</code>, вывод типов определяет принадлежность к типу <code>null</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// identifier: null</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>null</code> идентичен по своей работе с одноимённым типом из <em>JavaScript</em>.</p></section>\n<section class=\"content__section\" id=\"Undefined (undefined) примитивный неопределенный тип\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"undefined (undefined) primitivnyi neopredelennyi tip\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Undefined (undefined) примитивный неопределенный тип</span></h2><p class=\"content__paragraph\">Примитивный тип <code>undefined</code> указывает на то, что значение не определено. Тип данных <code>undefined</code> указывается с помощью ключевого слова <code>undefined</code> (не путать со свойством глобального объекта <code>undefined</code>, которое представляет единственное значение типа <code>Undefined</code>). </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, указанный после оператора двоеточия, это имеющийся только в TypeScript псевдоним (alias) для глобального типа Undefined. В то время как undefined, указанный после оператора присваивания, это единственное значение типа Undefined.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Во время выполнения объявленные, но не инициализированные переменные, поля и свойства класса, а также параметры имеют значение <code>undefined</code>. Также значение <code>undefined</code> является результатом вызова методов или функций, которые не возвращают значения.</p><p class=\"content__paragraph\">Тип <code>undefined</code> является подтипом всех типов, что делает его совместимым со всеми остальными типами.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Может возникнуть вопрос, почему тип <code>null</code>, который не имеет непосредственного отношения к типу <code>undefined</code>, совместим с ним? На данный момент, этот вопрос так и остается неразгаданным.</p><p class=\"content__paragraph\">В то время как тип данных <code>гndefined</code> совместим со всеми типами, помимо него самого, с ним совместимы лишь <code>null</code> и <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тогда, когда тип данных <code>гndefined</code> указывается не явно, компилятор устанавливает тип <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// identifier: any</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При активном флаге <code>--strictNullChecks</code>, тип <code>undefined</code> является подтипом только одного типа <code>any</code>. Поэтому его и ему в качестве значения, помимо самого себя, можно присвоить только тип <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При активном флаге <code>--strictNullChecks</code>, при условии что в качестве значения выступает значение <code>undefined</code>, вывод типов определяет принадлежность к типу <code>undefined</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// identifier: undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>undefined</code> идентичен по своей работе с одноимённым типом из <em>JavaScript</em>.</p></section>\n<section class=\"content__section\" id=\"Void (void) отсутствие конкретного типа\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"void (void) otsutstvie konkretnogo tipa\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Void (void) отсутствие конкретного типа</span></h2><p class=\"content__paragraph\">Тип данных <code>Void</code> можно назвать полной противоположностью типа <code>any</code>, так как этот тип означает отсутствие конкретного типа. Основное предназначение типа <code>Void</code> — явно указывать на то, что у функции или метода отсутствует возвращаемое значение.</p><p class=\"content__paragraph\">Тип данных <code>Void</code> указывается с помощью ключевого слова <code>void</code> (не путать с одноимённым оператором из <em>JavaScript</em>) и, в отличие от таких типов, как <code>null</code> и <code>undefined</code>, не имеет никаких значений.</p><p class=\"content__paragraph\">Тип <code>void</code> является подтипом <code>any</code> и супертипом для <code>null</code> и <code>undefined</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Однако с активным флагом <code>--strictNullChecks</code>, тип данных <code>void</code> совместим лишь с <code>any</code> и <code>undefined</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кому-то может показаться, что примеры чересчур излишни, или что примеры, в которых результат вызова функции не имеющей возвращаемого значения присваивается полям с различными типами, не имеет никакого отношения к реальности. Да, это так. Но целью данных примеров является научить думать как компилятор <em>TypeScript</em>.</p><p class=\"content__paragraph\">Когда функции в качестве возвращаемого типа указан тип <code>void</code>, может показаться, что возвращая различные значения с помощью оператора <code>return</code>, компилятор выбрасывает ошибки из-за понимания что функция помечена как ничего не возвращающая. Но это не так. Ошибка возникает по причине несовместимости типов.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Нельзя не упомянуть, что для функций и методов, которые ничего не возвращают и у которых отсутствует аннотация типа возвращаемого значения, вывод типов определяет принадлежность к типу <code>void</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// function action(): void</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В отличие от <code>null</code> и <code>undefined</code>, тип <code>void</code> не имеет ни одного значения, которое могло бы явно продемонстрировать присвоение. Однако компилятор понимает, что имеет дело с типом <code>void</code> при вызове функции или метода, которые не возвращают значение. Этот становится ещё нагляднее, когда вывод типов устанавливает тип полученный при вызове функции или метода которые ничего не возвращают.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// identifier: void</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>void</code> является уникальным для <em>TypeScript</em>. В <em>JavaScript</em> подобного типа не существует.</p></section>\n<section class=\"content__section\" id=\"Never (never) примитивный тип\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"never (never) primitivnyi tip\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Never (never) примитивный тип</span></h2><p class=\"content__paragraph\">Примитивный типа данных <code>Never</code> служит для указания того, что какие-либо операции никогда не будут выполнены.</p><p class=\"content__paragraph\"><code>Never</code> обозначается ключевым словом <code>never</code> и так же как и <code>void</code> не имеет явных значений.</p><p class=\"content__paragraph\">Тип данных <code>never</code> является подтипом всех типов, что делает его совместим со всеми остальными типами.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">never</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Так как типу <code>never</code> нельзя присвоить значение отличное от самого типа <code>never</code>, единственным местом, в котором его может использовать разработчик является аннотация возвращаемого из функции или метода значения, с одной оговоркой. Тип <code>never</code> можно указать только той функции, из которой программа действительно никогда не сможет выйти. </p><p class=\"content__paragraph\">Такой сценарий может выражаться в виде функции вызов которой приведет к однозначному исключению или тело функции будет включать бесконечный цикл.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Вывод типов определит принадлежность возвращаемого функцией значения к типу <code>never</code> только если он указан в аннотации возвращаемого типа явно.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// function action(): never</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All very, very bad.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let identifier: never</span>\n<span class=\"token keyword\">let</span> identifier <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let identifier: never</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стоит заметить, что без явного указания типа <code>never</code> вывод типов определит принадлежность возвращаемого значения к типу <code>void</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// function error(): void </span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// function loop(): void</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>never</code> является уникальным для <em>TypeScript</em>. В <em>JavaScript</em> подобного типа не существует.</p></section>\n<section class=\"content__section\" id=\"Unknown (unknown)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"unknown (unknown)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Unknown (unknown)</span></h2><p class=\"content__paragraph\">Тип <code>Unknown</code> является типобезопасным аналогом типа <code>any</code> и представлен в виде литерала <code>unknown</code>. Все типы совместимы с типом <code>unknown</code>, в то время как сам тип <code>unknown</code> совместим только с самим собой и типом <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">any</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">string</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">static</span> <span class=\"token builtin\">never</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nTypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> TypeSystem<span class=\"token punctuation\">.</span><span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, над типом <code>unknown</code> запрещено выполнение каких-либо операций.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\nv0<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nv0<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token function\">v0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nv1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\nv1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Если тип <code>unknown</code> составляет тип пересечение (<code>intersection</code>), то он будет перекрыт всеми типами.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T0 = any</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T1 = number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T2 = string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T3</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T3 = boolean</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T4</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T4 = null</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T5</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T5 = undefined</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T6</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T6 = void</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T7</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T7 = never</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T8</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T8 = T</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T9</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T9 = unknown</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Если тип <code>unknown</code> составляет тип объединение (<code>union</code>), то он перекроет все типы, за исключением типа <code>any</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T0 = any</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T1 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T2 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T3</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T3 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T4</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T4 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T5</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T5 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T6</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T6 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T7</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T7 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T8</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T8 = unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T9</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T9 = unknown</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Помимо этого, запрос ключей (<code>keyof</code>) для типа <code>unknown</code> возвращает тип <code>never</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T0 = \"toString\" | \"toFixed\" | \"toExponential\" | \"toPrecision\" | \"valueOf\" | \"toLocaleString\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T1 = string | number | symbol</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T2 = never</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип <code>unknown</code> позволяется использовать только в операциях равенства <code>===</code>, <code>==</code>, <code>!==</code> и <code>!=</code> и в операциях с логическими операторами <code>&#x26;&#x26;</code>, <code>||</code> и <code>!</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">!==</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v3 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">></span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v4 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v5 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">>=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v6 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v7 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v8 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v9 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v10 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v11 <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v12 <span class=\"token operator\">=</span> v0<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v13 <span class=\"token operator\">=</span> v0<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">let</span> v14 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, let v14: unknown</span>\n<span class=\"token keyword\">let</span> v15 <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, let v15: number</span>\n<span class=\"token keyword\">let</span> v16 <span class=\"token operator\">=</span> v0 <span class=\"token operator\">||</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, let v16: unknown</span>\n<span class=\"token keyword\">let</span> v17 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, let v17: boolean</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также стоит упомянуть, что функция у которой возвращаемый тип принадлежит к типу <code>unknown</code>, может не возвращать значение явно.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token function\">f0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, let v: unknown</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При активной опции <code>--strictPropertyInitialization</code> принадлежащие к типу <code>unknown</code> поля не нуждаются в инициализации.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token punctuation\">{</span>\n    f0<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    f1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    f2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Если в определении типа данных участвует сопоставленный тип (<code>Mapped Type</code>) которому в качестве аргумента типа передается тип <code>unknown</code>, то такой сопоставленный тип будет выведен как объектный тип <code>{}</code>. Поскольку сопоставленные типы (<code>Mapped Types</code>), псевдонимы типов (<code>types</code>), а также обобщения (<code>Generics&#x3C;></code>) будут рассмотрены позднее, то стоит просто помнить об этом факте и повторно прочесть написанное при необходимости.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MappedType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span>  MappedType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T0 = number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span>  MappedType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T1 = { [x: string]: any; }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span>  MappedType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type T2 = {}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>","commitInfoAll":[{"committedDate":"2020-09-16T14:06:09Z","message":"book(изменение основного контента): rethink chapter 014\n\nrethink chapter 014","messageHeadline":"book(изменение основного контента): rethink chapter 014","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/014\\.\\(Типы\\) Примитивные типы Null, Undefined, Void, Never, Unknown/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"Что такое и для чего нужен TypeScript","sections":[{"name":"Что такое TypeScript","path":"Что такое TypeScript"},{"name":"История TypeScript","path":"История TypeScript"},{"name":"Для чего нужен TypeScript","path":"Для чего нужен TypeScript"},{"name":"Зачем разработчику TypeScript","path":"Зачем разработчику TypeScript"}]},{"name":"Вступление","path":"Вступление","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"Система типов, тип данных, значимые и ссылочные типы","sections":[{"name":"Система Типов","path":"Система Типов"},{"name":"Тип данных (тип)","path":"Тип данных (тип)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"Тип данных, передающийся по значению (примитивный тип)"},{"name":"Тип данных, передающийся по ссылке","path":"Тип данных, передающийся по ссылке"}]},{"name":"Связывание, типизация, вывод типов","path":"Связывание, типизация, вывод типов","sections":[{"name":"Обработка кода компилятором","path":"Обработка кода компилятором"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"Лексический анализ (токенизация - tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"Синтаксический анализ (разбор - parsing)"},{"name":"Семантический анализ","path":"Семантический анализ"},{"name":"Связывание (Binding)","path":"Связывание (Binding)"},{"name":"Типизация","path":"Типизация"},{"name":"Вывод Типов (type inference)","path":"Вывод Типов (type inference)"}]},{"name":"Преобразование типов","path":"Преобразование типов","sections":[{"name":"Неявные Преобразования","path":"Неявные Преобразования"},{"name":"Явные Преобразования","path":"Явные Преобразования"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"Типизированные и нетипизированные языки программирования","sections":[{"name":"Нетипизированные языки","path":"Нетипизированные языки"},{"name":"Типизированные языки","path":"Типизированные языки"}]},{"name":"Статическая и динамическая типизация","path":"Статическая и динамическая типизация","sections":[{"name":"Статическая типизация (Static Typing)","path":"Статическая типизация (Static Typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"Динамическая Типизация (Dynamic Typing)"}]},{"name":"Сильная и слабая типизация","path":"Сильная и слабая типизация","sections":[{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Слабая типизация (weakly typed)","path":"Слабая типизация (weakly typed)"}]},{"name":"Явная и неявная типизация","path":"Явная и неявная типизация","sections":[{"name":"Явная типизация (explicit typing)","path":"Явная типизация (explicit typing)"},{"name":"Неявная типизация (implicit typing)","path":"Неявная типизация (implicit typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"Совместимость типов на основе вида типизации","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"Совместимость типов (Types Compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"Номинативная Типизация (nominative typing)"},{"name":"Структурная Типизация (structural typing)","path":"Структурная Типизация (structural typing)"},{"name":"Утиная Типизация (Duck typing)","path":"Утиная Типизация (Duck typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"Совместимость типов на основе вариантности","sections":[{"name":"Вариантность","path":"Вариантность"},{"name":"Иерархия наследования","path":"Иерархия наследования"},{"name":"Ковариантность","path":"Ковариантность"},{"name":"Контравариантность","path":"Контравариантность"},{"name":"Инвариантность","path":"Инвариантность"},{"name":"Бивариантность","path":"Бивариантность"}]},{"name":"Аннотация Типов","path":"Аннотация Типов","sections":[{"name":"Аннотация Типов - общее","path":"Аннотация Типов - общее"},{"name":"Аннотация типа","path":"Аннотация типа"},{"name":"Синтаксические конструкции var, let, const","path":"Синтаксические конструкции var, let, const"},{"name":"Функции (function)","path":"Функции (function)"},{"name":"Стрелочные Функции (arrow function)","path":"Стрелочные Функции (arrow function)"},{"name":"Классы (class)","path":"Классы (class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"Сравнение Синтаксиса TypeScript и JavaScript"},{"name":"Итог","path":"Итог"}]},{"name":"Базовый Тип Any","path":"Базовый Тип Any","sections":[{"name":"Any (any) произвольный тип","path":"Any (any) произвольный тип"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"Примитивные типы Number, String, Boolean, Symbol, BigInt","sections":[{"name":"Важно","path":"Важно"},{"name":"Number (number) примитивный числовой тип","path":"Number (number) примитивный числовой тип"},{"name":"String (string) примитивный строковый тип","path":"String (string) примитивный строковый тип"},{"name":"Boolean (boolean) примитивный логический тип","path":"Boolean (boolean) примитивный логический тип"},{"name":"Symbol (symbol) примитивный символьный тип","path":"Symbol (symbol) примитивный символьный тип"},{"name":"BigInt (bigint) примитивный числовой тип","path":"BigInt (bigint) примитивный числовой тип"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"Примитивные типы Null, Undefined, Void, Never, Unknown","sections":[{"name":"Важно","path":"Важно"},{"name":"Null (null) примитивный null тип","path":"Null (null) примитивный null тип"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"Undefined (undefined) примитивный неопределенный тип"},{"name":"Void (void) отсутствие конкретного типа","path":"Void (void) отсутствие конкретного типа"},{"name":"Never (never) примитивный тип","path":"Never (never) примитивный тип"},{"name":"Unknown (unknown)","path":"Unknown (unknown)"}]},{"name":"Примитивный Тип Enum","path":"Примитивный Тип Enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"Enum (enum) примитивный перечисляемый тип"},{"name":"Перечисления с числовым значением","path":"Перечисления с числовым значением"},{"name":"Перечисления со строковым значением","path":"Перечисления со строковым значением"},{"name":"Смешанное перечисление (mixed enum)","path":"Смешанное перечисление (mixed enum)"},{"name":"Перечисление в качестве типа данных","path":"Перечисление в качестве типа данных"},{"name":"Перечисление const с числовым и строковым значением","path":"Перечисление const с числовым и строковым значением"},{"name":"Когда стоит применять enum?","path":"Когда стоит применять enum?"}]},{"name":"Типы - Union, Intersection","path":"Типы - Union, Intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"Тип Объединение (Union Types)"},{"name":"Тип Пересечение (Intersection Type)","path":"Тип Пересечение (Intersection Type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"Type Queries (запросы типа), Alias (псевдонимы типа)","sections":[{"name":"Запросы Типа (Type Queries)","path":"Запросы Типа (Type Queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"Псевдонимы Типов (Type Aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"Литеральный тип Number (Numeric Literal Types)"},{"name":"Литеральный тип String (String Literal Types)","path":"Литеральный тип String (String Literal Types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"Шаблонный литеральный тип String (Template String Literal Types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"Литеральный Тип Boolean (Boolean Literal Types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"Литеральный тип Enum (Enum Literal Types)"}]},{"name":"Object, Array, Tuple","path":"Object, Array, Tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"Object (object) — ссылочный объектный тип"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"Array (type[]) ссылочный массивоподобный тип"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"Tuple ([T0, T1, …, Tn]) тип кортеж"}]},{"name":"Function, Functional Types","path":"Function, Functional Types","sections":[{"name":"Function Types - тип функция","path":"Function Types - тип функция"},{"name":"Functional Types - функциональный тип","path":"Functional Types - функциональный тип"},{"name":"this в сигнатуре функции","path":"this в сигнатуре функции"}]},{"name":"Interfaces","path":"Interfaces","sections":[{"name":"Общая теория","path":"Общая теория"},{"name":"Интерфейс в TypeScript","path":"Интерфейс в TypeScript"},{"name":"Объявление (declaration)","path":"Объявление (declaration)"},{"name":"Конвенции именования интерфейсов","path":"Конвенции именования интерфейсов"},{"name":"Реализация интерфейса (implements)","path":"Реализация интерфейса (implements)"},{"name":"Декларация свойств get и set (accessors)","path":"Декларация свойств get и set (accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"Указание интерфейса в качестве типа (interface types)"},{"name":"Расширение интерфейсов (extends interface)","path":"Расширение интерфейсов (extends interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"Расширение интерфейсом класса (extends class)"},{"name":"Описание класса (функции-конструктора)","path":"Описание класса (функции-конструктора)"},{"name":"Описание функционального выражения","path":"Описание функционального выражения"},{"name":"Описание индексных членов в объектных типов","path":"Описание индексных членов в объектных типов"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"Инлайн интерфейсы (Inline Interface)"},{"name":"Слияние интерфейсов","path":"Слияние интерфейсов"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"Индексные члены (определение динамических ключей)"},{"name":"Строгая проверка при обращении к динамическим ключам","path":"Строгая проверка при обращении к динамическим ключам"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"Модификаторы доступа (Access Modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"Модификатор доступа public (публичный)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"Модификатор доступа private (закрытый или скрытый)"},{"name":"Модификатор доступа protected (защищенный)","path":"Модификатор доступа protected (защищенный)"},{"name":"Модификаторы доступа и конструкторы класса","path":"Модификаторы доступа и конструкторы класса"},{"name":"Быстрое объявление полей","path":"Быстрое объявление полей"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"Закрытые поля определенные спецификацией ECMAScript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"Нативный закрытый (private) модификатор доступа"}]},{"name":"Абстрактные классы (abstract classes)","path":"Абстрактные классы (abstract classes)","sections":[{"name":"Общие характеристики","path":"Общие характеристики"},{"name":"Теория","path":"Теория"}]},{"name":"Полиморфный тип this","path":"Полиморфный тип this","sections":[{"name":"this - как тип","path":"this - как тип"}]},{"name":"Модификатор readonly (только для чтения)","path":"Модификатор readonly (только для чтения)","sections":[{"name":"Модификатор readonly","path":"Модификатор readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"Definite Assignment Assertion Modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"Модификатор утверждения не принадлежности значения к типу undefined"}]},{"name":"Классы — Тонкости","path":"Классы — Тонкости","sections":[{"name":"Классы - Тонкости implements","path":"Классы - Тонкости implements"},{"name":"Частичное слияние интерфейса с классом","path":"Частичное слияние интерфейса с классом"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"Переопределение свойств полями и наоборот при наследовании"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","sections":[{"name":"Нюансы на практике","path":"Нюансы на практике"}]},{"name":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","path":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","sections":[{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"Оператор ! (Non-Null and Non-Undefined Operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"Оператор ! (Definite Assignment Assertion)"}]},{"name":"Обобщения (Generics)","path":"Обобщения (Generics)","sections":[{"name":"Обобщения - общие понятия","path":"Обобщения - общие понятия"},{"name":"Обобщения в TypeScript","path":"Обобщения в TypeScript"},{"name":"Параметры типа - extends (generic constraints)","path":"Параметры типа - extends (generic constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"Параметра типа - значение по умолчанию = (generic parameter defaults)"},{"name":"Параметры типа - как тип данных","path":"Параметры типа - как тип данных"}]},{"name":"Дискриминантное объединение (Discriminated Union)","path":"Дискриминантное объединение (Discriminated Union)","sections":[{"name":"Дискриминантное объединение","path":"Дискриминантное объединение"}]},{"name":"Импорт и экспорт только типа","path":"Импорт и экспорт только типа","sections":[{"name":"Предыстория возникновения import type и export type","path":"Предыстория возникновения import type и export type"},{"name":"import type и export type - форма объявления","path":"import type и export type - форма объявления"},{"name":"Импорт и экспорт только типа на практике","path":"Импорт и экспорт только типа на практике"},{"name":"Вспомогательный флаг --importsNotUsedAsValues","path":"Вспомогательный флаг --importsNotUsedAsValues"}]},{"name":"Утверждение типов (Type Assertion)","path":"Утверждение типов (Type Assertion)","sections":[{"name":"Утверждение типов - общее","path":"Утверждение типов - общее"},{"name":"Утверждение типа <Type> синтаксис","path":"Утверждение типа <Type> синтаксис"},{"name":"Утверждение типа с помощью оператора as","path":"Утверждение типа с помощью оператора as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"Приведение (утверждение) к константе (const assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Утверждение в сигнатуре (Signature Assertion)"}]},{"name":"Защитники типа","path":"Защитники типа","sections":[{"name":"Защитники Типа - общее","path":"Защитники Типа - общее"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"Сужение диапазона множества типов на основе типа данных"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"Сужение диапазона множества типов на основе доступных членов объекта"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"Сужение диапазона множества типов на основе функции, определенной пользователем"}]},{"name":"Вывод типов","path":"Вывод типов","sections":[{"name":"Вывод типов - общие сведения","path":"Вывод типов - общие сведения"},{"name":"Вывод примитивных типов","path":"Вывод примитивных типов"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)"},{"name":"Вывод объектных типов","path":"Вывод объектных типов"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"Вывод типа для полей класса на основе инициализации их в конструкторе"},{"name":"Вывод объединенных (Union) типов","path":"Вывод объединенных (Union) типов"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"Вывод пересечения (Intersection) с дискриминантными полями"},{"name":"Вывод типов кортеж (Tuple)","path":"Вывод типов кортеж (Tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"Совместимость объектных типов (Compatible Object Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость объектных типов в TypeScript","path":"Совместимость объектных типов в TypeScript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"Совместимость функциональных типов (Compatible Function Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость параметров","path":"Совместимость параметров"},{"name":"Совместимость возвращаемого значения","path":"Совместимость возвращаемого значения"}]},{"name":"Совместимость объединений (Union Types)","path":"Совместимость объединений (Union Types)","sections":[{"name":"Совместимость","path":"Совместимость"}]},{"name":"Типизация в TypeScript","path":"Типизация в TypeScript","sections":[{"name":"Общие сведения","path":"Общие сведения"},{"name":"Статическая типизация (static typing)","path":"Статическая типизация (static typing)"},{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"Явно типизированный (explicit typing) с выводом типов (type inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)"},{"name":"Вариантность (variance)","path":"Вариантность (variance)"},{"name":"Наилучший общий тип (Best common type)","path":"Наилучший общий тип (Best common type)"},{"name":"Контекстный тип (Contextual Type)","path":"Контекстный тип (Contextual Type)"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","sections":[{"name":"Запрос ключей keyof","path":"Запрос ключей keyof"},{"name":"Поиск типов (Lookup Types)","path":"Поиск типов (Lookup Types)"},{"name":"Сопоставление типов (Mapped Types)","path":"Сопоставление типов (Mapped Types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"Префиксы + и - в сопоставленных типах"}]},{"name":"Условные типы (Conditional Types)","path":"Условные типы (Conditional Types)","sections":[{"name":"Условные типы на практике","path":"Условные типы на практике"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"Распределительные условные типы (Distributive Conditional Types)"},{"name":"Вывод типов в условном типе","path":"Вывод типов в условном типе"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"Readonly, Partial, Required, Pick, Record","sections":[{"name":"Readonly<T> (сделать члены объекта только для чтения)","path":"Readonly<T> (сделать члены объекта только для чтения)"},{"name":"Partial<T> (сделать все члены объекта необязательными)","path":"Partial<T> (сделать все члены объекта необязательными)"},{"name":"Required<T> (сделать все необязательные члены обязательными)","path":"Required<T> (сделать все необязательные члены обязательными)"},{"name":"Pick (отфильтровать объектный тип)","path":"Pick (отфильтровать объектный тип)"},{"name":"Record<K, T> (динамически определить поле в объектном типе)","path":"Record<K, T> (динамически определить поле в объектном типе)"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","sections":[{"name":"Exclude<T, U> (исключает из T признаки присущие U)","path":"Exclude<T, U> (исключает из T признаки присущие U)"},{"name":"Extract<T, U> (общие для двух типов признаки)","path":"Extract<T, U> (общие для двух типов признаки)"},{"name":"NonNullable<T> (удаляет типы null и undefined)","path":"NonNullable<T> (удаляет типы null и undefined)"},{"name":"ReturnType<T> (получить тип значения возвращаемого функцией)","path":"ReturnType<T> (получить тип значения возвращаемого функцией)"},{"name":"InstanceType<T> (получить через тип класса тип его экземпляра)","path":"InstanceType<T> (получить через тип класса тип его экземпляра)"},{"name":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)","path":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)"},{"name":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)","path":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)"},{"name":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)","path":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","sections":[{"name":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)","path":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)"},{"name":"ReadonlyArray<T> (неизменяемый массив)","path":"ReadonlyArray<T> (неизменяемый массив)"},{"name":"ReadonlyMap<K, V> (неизменяемая карта)","path":"ReadonlyMap<K, V> (неизменяемая карта)"},{"name":"ReadonlySet<T> (неизменяемое множество)","path":"ReadonlySet<T> (неизменяемое множество)"}]},{"name":"Синтаксические конструкции и операторы","path":"Синтаксические конструкции и операторы","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)"},{"name":"Операнды для delete должны быть необязательными","path":"Операнды для delete должны быть необязательными"}]},{"name":"Типизированный React","path":"Типизированный React","sections":[{"name":"Расширение .tsx","path":"Расширение .tsx"}]},{"name":"Функциональные компоненты","path":"Функциональные компоненты","sections":[{"name":"Определение компонента как Function Declaration","path":"Определение компонента как Function Declaration"},{"name":"Определение компонента как Function Expression","path":"Определение компонента как Function Expression"}]},{"name":"Классовые компоненты","path":"Классовые компоненты","sections":[{"name":"Производные от Component<P, S, SS>","path":"Производные от Component<P, S, SS>"},{"name":"Производные от PureComponent<Props, State, Snapshot>","path":"Производные от PureComponent<Props, State, Snapshot>"}]},{"name":"Универсальные компоненты","path":"Универсальные компоненты","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"Обобщенные компоненты (Generics Component)"}]},{"name":"Типизированные хуки","path":"Типизированные хуки","sections":[{"name":"Предопределенные хуки - useState<T>()","path":"Предопределенные хуки - useState<T>()"},{"name":"Предопределенные хуки - useEffect() и useLayoutEffect()","path":"Предопределенные хуки - useEffect() и useLayoutEffect()"},{"name":"Предопределенные хуки - useContext<T>()","path":"Предопределенные хуки - useContext<T>()"},{"name":"Предопределенные хуки - useReducer<R>()","path":"Предопределенные хуки - useReducer<R>()"},{"name":"Предопределенные хуки - useCallback<T>()","path":"Предопределенные хуки - useCallback<T>()"},{"name":"Предопределенные хуки - useRef<T>()","path":"Предопределенные хуки - useRef<T>()"},{"name":"Предопределенные хуки - useImperativeHandle<T, R>()","path":"Предопределенные хуки - useImperativeHandle<T, R>()"},{"name":"Предопределенные хуки - useMemo<T>()","path":"Предопределенные хуки - useMemo<T>()"},{"name":"Предопределенные хуки - useDebugValue<T>()","path":"Предопределенные хуки - useDebugValue<T>()"},{"name":"Пользовательский хук","path":"Пользовательский хук"}]},{"name":"Контекст (Context)","path":"Контекст (Context)","sections":[{"name":"Определение контекста","path":"Определение контекста"}]},{"name":"HOC (Higher-Order Components)","path":"HOC (Higher-Order Components)","sections":[{"name":"Определение hoc","path":"Определение hoc"},{"name":"Определение hoc на основе функционального компонента","path":"Определение hoc на основе функционального компонента"},{"name":"Определение hoc на основе классового компонента","path":"Определение hoc на основе классового компонента"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"Пространства имен (namespace) и модули (module)","sections":[{"name":"Namespace и module — предназначение","path":"Namespace и module — предназначение"},{"name":"Namespace - определение","path":"Namespace - определение"},{"name":"Модули (export, import) — определение","path":"Модули (export, import) — определение"},{"name":"Конфигурирование проекта","path":"Конфигурирование проекта"}]},{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения","sections":[{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"Сборка проекта с помощью tsc (TypeScript compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"Сборка с использованием ссылок на проекты","sections":[{"name":"Ссылки на проекты","path":"Ссылки на проекты"}]},{"name":"Декларации","path":"Декларации","sections":[{"name":"Что такое декларация (Declaration)","path":"Что такое декларация (Declaration)"},{"name":"Установка деклараций с помощью @types","path":"Установка деклараций с помощью @types"},{"name":"Подготовка к созданию декларации","path":"Подготовка к созданию декларации"},{"name":"Разновидности деклараций","path":"Разновидности деклараций"},{"name":"Декларации и область видимости","path":"Декларации и область видимости"},{"name":"Декларации для библиотек с одной точкой входа","path":"Декларации для библиотек с одной точкой входа"},{"name":"Декларации для библиотек с множеством точек входа","path":"Декларации для библиотек с множеством точек входа"},{"name":"Создание деклараций вручную","path":"Создание деклараций вручную"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"Директива с тройным слешем (triple-slash directives)"},{"name":"Импортирование декларации (import)","path":"Импортирование декларации (import)"}]},{"name":"Публикация TypeScript","path":"Публикация TypeScript","sections":[{"name":"Публикация","path":"Публикация"}]},{"name":"Опции компилятора","path":"Опции компилятора","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressExcessPropertyErrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressImplicitAnyIndexErrors"},{"name":"noImplicitAny","path":"noImplicitAny"},{"name":"checkJs","path":"checkJs"},{"name":"JSX","path":"JSX"},{"name":"jsxFactory","path":"jsxFactory"},{"name":"target (t)","path":"target (t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysStrict"},{"name":"strictNullChecks","path":"strictNullChecks"},{"name":"stripInternal","path":"stripInternal"},{"name":"noImplicitThis","path":"noImplicitThis"},{"name":"noImplicitUseStrict","path":"noImplicitUseStrict"},{"name":"baseUrl","path":"baseUrl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootDir"},{"name":"rootDirs","path":"rootDirs"},{"name":"traceResolution","path":"traceResolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"noLib"},{"name":"noResolve","path":"noResolve"},{"name":"noStrictGenericChecks","path":"noStrictGenericChecks"},{"name":"preserveConstEnums","path":"preserveConstEnums"},{"name":"removeComments","path":"removeComments"},{"name":"noUnusedLocals","path":"noUnusedLocals"},{"name":"noUnusedParameters","path":"noUnusedParameters"},{"name":"skipLibCheck","path":"skipLibCheck"},{"name":"declarationDir","path":"declarationDir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeRoots"},{"name":"allowUnusedLabels","path":"allowUnusedLabels"},{"name":"noImplicitReturns","path":"noImplicitReturns"},{"name":"noFallthroughCasesInSwitch","path":"noFallthroughCasesInSwitch"},{"name":"outFile","path":"outFile"},{"name":"allowSyntheticDefaultImports","path":"allowSyntheticDefaultImports"},{"name":"allowUnreachableCode","path":"allowUnreachableCode"},{"name":"allowJs","path":"allowJs"},{"name":"reactNamespace","path":"reactNamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleResolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noEmitHelpers"},{"name":"newLine","path":"newLine"},{"name":"inlineSourceMap","path":"inlineSourceMap"},{"name":"inlineSources","path":"inlineSources"},{"name":"noEmitOnError","path":"noEmitOnError"},{"name":"noEmit","path":"noEmit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downlevelIteration"},{"name":"emitBOM","path":"emitBOM"},{"name":"emitDecoratorMetadata","path":"emitDecoratorMetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceConsistentCasingInFileNames"},{"name":"help (h)","path":"help (h)"},{"name":"importHelpers","path":"importHelpers"},{"name":"isolatedModules","path":"isolatedModules"},{"name":"listEmittedFiles","path":"listEmittedFiles"},{"name":"listFiles","path":"listFiles"},{"name":"sourceRoot","path":"sourceRoot"},{"name":"mapRoot","path":"mapRoot"},{"name":"maxNodeModuleJsDepth","path":"maxNodeModuleJsDepth"},{"name":"project (p)","path":"project (p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version (v)"},{"name":"watch (w)","path":"watch (w)"},{"name":"preserveSymlinks","path":"preserveSymlinks"},{"name":"strictFunctionTypes","path":"strictFunctionTypes"},{"name":"locale","path":"locale"},{"name":"strinctPropertyInitialization","path":"strinctPropertyInitialization"},{"name":"esModuleInterop","path":"esModuleInterop"},{"name":"emitDeclarationsOnly","path":"emitDeclarationsOnly"},{"name":"resolveJsonModule","path":"resolveJsonModule"},{"name":"declarationMap","path":"declarationMap"},{"name":"strictBindCallApply","path":"strictBindCallApply"},{"name":"showConfig","path":"showConfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsBuildInfoFile"},{"name":"allowUmdGlobalAccess","path":"allowUmdGlobalAccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disableSourceOfProjectReferenceRedirect"},{"name":"useDefineForClassFields","path":"useDefineForClassFields"},{"name":"importsNotUsedAsValues","path":"importsNotUsedAsValues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumeChangesOnlyAffectDirectDependencies"},{"name":"watchFile","path":"watchFile"},{"name":"watchDirectory","path":"watchDirectory"},{"name":"fallbackPolling","path":"fallbackPolling"},{"name":"synchronousWatchDirectory","path":"synchronousWatchDirectory"},{"name":"noUncheckedIndexedAccess","path":"noUncheckedIndexedAccess"}]}]}},"staticQueryHashes":["408059355","63159454"]}