{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/Совместимость функциональных типов (Compatible Function Types)","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}},"contentLevelUpInformer":{"text":"Кажется непонятным и слишком сложным? Чего-то не хватает? Расскажи об этом! Помоги сделать контент более доступным для следующих поколений!","buttons":[{"label":"Сообщить на Github","href":""}]}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Книга и документация по языку TypeScript, которая шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Бесплатная pdf книга на русском по языку TypeScript."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Совместимость функциональных типов (Compatible Function Types)","section":"Типизация","path":"sovmestimost funkcionalnyh tipov (compatible function types)","subtitles":[{"subtitle":"Важно","path":"sovmestimost funkcionalnyh tipov (compatible function types)#vajno"},{"subtitle":"Совместимость параметров","path":"sovmestimost funkcionalnyh tipov (compatible function types)#sovmestimost parametrov"},{"subtitle":"Совместимость возвращаемого значения","path":"sovmestimost funkcionalnyh tipov (compatible function types)#sovmestimost vozvrashchaemogo znacheniya"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Совместимость функциональных типов (Compatible Function Types)</span></h1><p class=\"content__paragraph\">После объектных типов, мир совместимости функциональных типов может показаться перевернутым с ног на голову. Он обладает множеством нюансов, каждый из которых будет детально рассмотрен в текущей главе.</p></section>\n<section class=\"content__section\" id=\"Важно\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"vajno\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Важно</span></h2><p class=\"content__paragraph\">Важной частью работы с функциями является понимание совместимости функциональных типов. Поверхностное понимание механизма совместимости функциональных типов может сложить ошибочное чувство их постижения, поскольку то что на первый взгляд казаться очевидным, не всегда может являться таковым. Для того чтобы понять замысел создателей <em>TypeScript</em>, нужно детально разобрать каждый момент. Но прежде стоит уточнить одну деталь. В примерах, которые будут обсуждаться в главе, посвященной типизации функциональных типов, будет использоваться уточняющий шаблон <code>: Target = Source</code>. Кроме того, объектные типы указанные в сигнатуре функции, ведут себя также, как было описано в главе посвященной совместимости объектных типов.</p></section>\n<section class=\"content__section\" id=\"Совместимость параметров\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"sovmestimost parametrov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Совместимость параметров</span></h2><p class=\"content__paragraph\">Первое, на что стоит обратить внимание, это параметры функции. На параметры функции приходится наибольшее количество неоднозначностей, связанных с совместимостью.</p><p class=\"content__paragraph\">Начать стоит с того, что две сигнатуры считаются совместимыми, если они имеют равное количество параметров с совместимыми типами данных.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p3<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p4<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok -> разные идентификаторы</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">При этом стоит заметить, что идентификаторы параметров не участвуют в проверке на совместимость.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok -> разные идентификаторы</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, параметры, помеченные как необязательные, учитываются только тогда, когда они участвуют в проверке на совместимость по признакам количества параметров.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok или Error с включенным флагом --strictNullChecks</span>\n<span class=\"token keyword\">let</span> v3<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v4<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Функция, имеющая определение остаточных параметров, будет совместима в обе стороны с любой функцией, так как остаточные параметры расцениваются способными принадлежать к любому типу и чье количество находится в диапазоне от нуля до бесконечности.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v3<span class=\"token operator\">:</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В случае, если перед остаточными параметрами объявлены обязательные параметры, то функция будет совместима с любой другой функцией, которая совместима с обязательной частью.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v3<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v4<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v5<span class=\"token operator\">:</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v6<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Следующий, один из неочевидных моментов совместимости функциональных типов, заключается в том, что сигнатура с меньшим числом параметров, совместима с сигнатурой, с большим числом параметров, но не наоборот. Это правило верно при условии соблюдения предыдущих правил, относящихся к совместимости типов.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v3<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok -> необязательный параметр</span>\n<span class=\"token keyword\">let</span> v4<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error -> обязательных параметров больше чем в типе T1</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">На данный момент уже известно, что два объектных типа (<code>:T = S</code>), на основании структурной типизации, считаются совместимыми, если в типе <code>S</code> присутствуют все признаки типа <code>T</code>. Помимо этого, тип <code>S</code> может быть более специфичным, чем тип <code>T</code>. Простыми словами, тип <code>S</code>, помимо всех признаков, присущих в типе <code>T</code>, также может обладать признаками которые в типе <code>T</code> отсутствуют, но не наоборот. Если ещё более просто, то больший тип совместим с меньшим типом данных. В случае с параметрами функциональных типов, все с точностью наоборот.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, такое же количество параметров</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, параметров меньше</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, параметров больше</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Такое поведение проще всего объяснить на примере работы с методами массива. За основу будет взята декларация метода <code>forEach</code> из библиотеки <code>lib.es5.d.ts</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callbackfn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В данном случае нужно обратить внимание на функциональный тип первого параметра, описывающего три других параметра.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function-variable function\">callbackfn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Если бы функциональный тип с большим числом параметров не был совместим с функциональным типом с меньшим числом параметров, то при работе с методом <code>forEach</code>, при необходимости только в одном, первом параметре, обязательно бы приходилось создавать <em>callback</em> со всеми тремя параметрами, что привело бы к излишнему коду.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Elephant</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animals<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> animalNames<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nanimals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Плохо</span>\n    animalNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nanimals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Хорошо</span>\n    animalNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, обобщенные функции, чьим параметрам в качестве типа указан параметр типа, проверяются на совместимость по стандартному сценарию.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f0</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f1</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также стоит знать, что параметры, принадлежащие к конкретным типам, совместимы с параметрами, которым в качестве типов указаны параметры типа, но не наоборот.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f0</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, параметр типа T не совместим с параметром типа number</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, параметр типа number совместим с параметром типа T</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Помимо того, что две сигнатуры считаются совместимыми если участвующие в проверке параметры принадлежат к одному типу, они также считаются совместимыми при совместимости типов этих параметров. Но с этим связана ещё одна неочевидность. Как известно, в контексте объектных типов, если тип <code>T1</code> не идентичен полностью типу <code>T2</code>, и при этом тип <code>T1</code> совместим с типом <code>T2</code>, то значит тип <code>T2</code> будет совместим с типом <code>T1</code> через операцию приведения типов.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> f1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok -> неявное преобразование типов</span>\n\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok -> явное приведение типов</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">С типами в аннотации параметров функций все то же самое, только не требуется явного преобразование типов. Такое поведение называется бивариантностью параметров и создано для того, чтобы сохранить совместимость с распространенными в <em>JavaScript</em> практиками. Подробно бивариантность была рассмотрена в главе <a href=\"/book/chapters/%D0%A1%D0%BE%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%D0%BE%D0%B2%20%D0%BD%D0%B0%20%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B5%20%D0%B2%D0%B0%D1%80%D0%B8%D0%B0%D0%BD%D1%82%D0%BD%D0%BE%D1%81%D1%82%D0%B8\">“Экскурс в типизацию - Совместимость типов на основе вариантности”</a>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> f1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f0</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// бивариантное поведение</span>\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">FT0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, параметр с типом T1 совместим с параметром принадлежащим к типу T0. Кроме того, тип T1 совместим с типом T0.</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">FT1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok, параметр с типом T0 совместим с параметром принадлежащем к типу T1. Но тип T0 не совместим с типом T1  без явного приведения.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Изменить поведение бивариантного сопоставления параметров можно с помощью опции компилятора <code>--strictFunctionTypes</code>. Установив флаг <code>--strictFunctionTypes</code> в <code>true</code>, сопоставление будет происходить по контрвариантным правилам (глава <a href=\"/book/chapters/%D0%A1%D0%BE%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%D0%BE%D0%B2%20%D0%BD%D0%B0%20%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B5%20%D0%B2%D0%B0%D1%80%D0%B8%D0%B0%D0%BD%D1%82%D0%BD%D0%BE%D1%81%D1%82%D0%B8\">“Экскурс в типизацию - Совместимость типов на основе вариантности”</a>).</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> f1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f0</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// контрвариантное поведение</span>\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">FT0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">FT1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"Совместимость возвращаемого значения\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"sovmestimost vozvrashchaemogo znacheniya\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Совместимость возвращаемого значения</span></h2><p class=\"content__paragraph\">Первое, на что стоит обратить внимание, это ожидаемое поведение при проверке на совместимость возвращаемых типов. Другими словами, две сигнатуры считаются совместимыми, если их типы,  указанные в аннотации возвращаемого значения, совместимы по правилам структурной типизации, которой подчиняются все объекты в <em>TypeScript</em>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span> f0<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> f1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT0</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FT1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">FT0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">FT1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Исключением из этого правила составляет примитивный тип данных <code>void</code>. Как стало известно из главы посвященной типу данных <code>void</code>, в обычном режиме он совместим только с типами <code>null</code> и <code>undefined</code>, так как они являются его подтипами. При активной рекомендуемой опции <code>--strictNullChecks</code>, примитивный тип <code>void</code> совместим только с типом <code>undefined</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok and Error с включенным флагом strictNullChecks</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Но это правило неверно, если тип <code>void</code> указан в аннотации возвращаемого из функции значения. В случаях, когда примитивный тип <code>void</code> указан в качестве возвращаемого из функции типа, он совместим со всеми типами, без исключения.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v3<span class=\"token operator\">:</span> <span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Причину по которой поведение типа <code>void</code> при указании его в аннотации возвращаемого из функции значения было изменено лучше рассмотреть на примере работы с массивом, а точнее его методом <code>forEach</code>.</p><p class=\"content__paragraph\">Предположим есть два массива. Первый массив состоит из элементов принадлежащих к объектному типу у которого определенно поле <code>name</code>. Второй массив предназначен для хранения строк и имеет длину равную <code>0</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> \n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animals<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Задача заключается в получении имен объектов из первого массива с последующим сохранением их во второй массив.</p><p class=\"content__paragraph\">Для этого потребуется определить стрелочную функцию обратного вызова (<em>callback</em>). Слева от стрелки будет расположен один параметр <code>value</code>, а справа — операция сохранения имени во второй массив с помощью метода <code>push</code>. Если обратится к декларации метода массива <code>forEach</code>, то можно убедится, что в качестве функции обратного вызова этот метод принимает функцию у которой отсутствует возвращаемое значение.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callbackfn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Но в нашем случае в теле функции обратного вызова происходит операция добавления элемента в массив. Результатом этой операции является значение длины массива. То есть, метод <code>push</code> возвращает значение, принадлежащий к типу <code>number</code>, которое в свою очередь возвращается из стрелочной функции обратного вызова, переданного в метод <code>forEach</code>, у которого этот параметр задекларирован как функция возвращающая тип <code>void</code>, что противоречит возвращенному типу <code>number</code>. В данном случае отсутствие ошибки объясняется совместимостью типа <code>void</code>, используемого в функциональных типах, со всеми остальными типами.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animals<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> animalNameAll<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nanimalNameAll<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> animal <span class=\"token operator\">=></span> animalNameAll<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> animal<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// forEach ожидает () => void, а получает () => number, так как стрелочная функция без тела неявно возвращает значение, возвращаемое методом push.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">И напоследок стоит упомянуть, что две обобщенные функции считаются совместимы, если у них в аннотации возвращаемого значения указан параметр типа.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f0</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f1</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Кроме того, параметр типа совместим с любым конкретным типом данных, но не наоборот.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f0</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f0<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> f1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> v0<span class=\"token operator\">:</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">let</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> f0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>","commitInfoAll":[{"committedDate":"2020-09-24T12:18:19Z","message":"book(изменение основного контента): rethink chapter 039\n\nrethink chapter 039","messageHeadline":"book(изменение основного контента): rethink chapter 039","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/039\\.\\(Типизация\\) Совместимость функциональных типов \\(Compatible Function Types\\)/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"Что такое и для чего нужен TypeScript","sections":[{"name":"Что такое TypeScript","path":"Что такое TypeScript"},{"name":"История TypeScript","path":"История TypeScript"},{"name":"Для чего нужен TypeScript","path":"Для чего нужен TypeScript"},{"name":"Зачем разработчику TypeScript","path":"Зачем разработчику TypeScript"}]},{"name":"Вступление","path":"Вступление","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"Система типов, тип данных, значимые и ссылочные типы","sections":[{"name":"Система Типов","path":"Система Типов"},{"name":"Тип данных (тип)","path":"Тип данных (тип)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"Тип данных, передающийся по значению (примитивный тип)"},{"name":"Тип данных, передающийся по ссылке","path":"Тип данных, передающийся по ссылке"}]},{"name":"Связывание, типизация, вывод типов","path":"Связывание, типизация, вывод типов","sections":[{"name":"Обработка кода компилятором","path":"Обработка кода компилятором"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"Лексический анализ (токенизация - tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"Синтаксический анализ (разбор - parsing)"},{"name":"Семантический анализ","path":"Семантический анализ"},{"name":"Связывание (Binding)","path":"Связывание (Binding)"},{"name":"Типизация","path":"Типизация"},{"name":"Вывод Типов (type inference)","path":"Вывод Типов (type inference)"}]},{"name":"Преобразование типов","path":"Преобразование типов","sections":[{"name":"Неявные Преобразования","path":"Неявные Преобразования"},{"name":"Явные Преобразования","path":"Явные Преобразования"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"Типизированные и нетипизированные языки программирования","sections":[{"name":"Нетипизированные языки","path":"Нетипизированные языки"},{"name":"Типизированные языки","path":"Типизированные языки"}]},{"name":"Статическая и динамическая типизация","path":"Статическая и динамическая типизация","sections":[{"name":"Статическая типизация (Static Typing)","path":"Статическая типизация (Static Typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"Динамическая Типизация (Dynamic Typing)"}]},{"name":"Сильная и слабая типизация","path":"Сильная и слабая типизация","sections":[{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Слабая типизация (weakly typed)","path":"Слабая типизация (weakly typed)"}]},{"name":"Явная и неявная типизация","path":"Явная и неявная типизация","sections":[{"name":"Явная типизация (explicit typing)","path":"Явная типизация (explicit typing)"},{"name":"Неявная типизация (implicit typing)","path":"Неявная типизация (implicit typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"Совместимость типов на основе вида типизации","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"Совместимость типов (Types Compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"Номинативная Типизация (nominative typing)"},{"name":"Структурная Типизация (structural typing)","path":"Структурная Типизация (structural typing)"},{"name":"Утиная Типизация (Duck typing)","path":"Утиная Типизация (Duck typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"Совместимость типов на основе вариантности","sections":[{"name":"Вариантность","path":"Вариантность"},{"name":"Иерархия наследования","path":"Иерархия наследования"},{"name":"Ковариантность","path":"Ковариантность"},{"name":"Контравариантность","path":"Контравариантность"},{"name":"Инвариантность","path":"Инвариантность"},{"name":"Бивариантность","path":"Бивариантность"}]},{"name":"Аннотация Типов","path":"Аннотация Типов","sections":[{"name":"Аннотация Типов - общее","path":"Аннотация Типов - общее"},{"name":"Аннотация типа","path":"Аннотация типа"},{"name":"Синтаксические конструкции var, let, const","path":"Синтаксические конструкции var, let, const"},{"name":"Функции (function)","path":"Функции (function)"},{"name":"Стрелочные Функции (arrow function)","path":"Стрелочные Функции (arrow function)"},{"name":"Классы (class)","path":"Классы (class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"Сравнение Синтаксиса TypeScript и JavaScript"},{"name":"Итог","path":"Итог"}]},{"name":"Базовый Тип Any","path":"Базовый Тип Any","sections":[{"name":"Any (any) произвольный тип","path":"Any (any) произвольный тип"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"Примитивные типы Number, String, Boolean, Symbol, BigInt","sections":[{"name":"Важно","path":"Важно"},{"name":"Number (number) примитивный числовой тип","path":"Number (number) примитивный числовой тип"},{"name":"String (string) примитивный строковый тип","path":"String (string) примитивный строковый тип"},{"name":"Boolean (boolean) примитивный логический тип","path":"Boolean (boolean) примитивный логический тип"},{"name":"Symbol (symbol) примитивный символьный тип","path":"Symbol (symbol) примитивный символьный тип"},{"name":"BigInt (bigint) примитивный числовой тип","path":"BigInt (bigint) примитивный числовой тип"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"Примитивные типы Null, Undefined, Void, Never, Unknown","sections":[{"name":"Важно","path":"Важно"},{"name":"Null (null) примитивный null тип","path":"Null (null) примитивный null тип"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"Undefined (undefined) примитивный неопределенный тип"},{"name":"Void (void) отсутствие конкретного типа","path":"Void (void) отсутствие конкретного типа"},{"name":"Never (never) примитивный тип","path":"Never (never) примитивный тип"},{"name":"Unknown (unknown)","path":"Unknown (unknown)"}]},{"name":"Примитивный Тип Enum","path":"Примитивный Тип Enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"Enum (enum) примитивный перечисляемый тип"},{"name":"Перечисления с числовым значением","path":"Перечисления с числовым значением"},{"name":"Перечисления со строковым значением","path":"Перечисления со строковым значением"},{"name":"Смешанное перечисление (mixed enum)","path":"Смешанное перечисление (mixed enum)"},{"name":"Перечисление в качестве типа данных","path":"Перечисление в качестве типа данных"},{"name":"Перечисление const с числовым и строковым значением","path":"Перечисление const с числовым и строковым значением"},{"name":"Когда стоит применять enum?","path":"Когда стоит применять enum?"}]},{"name":"Типы - Union, Intersection","path":"Типы - Union, Intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"Тип Объединение (Union Types)"},{"name":"Тип Пересечение (Intersection Type)","path":"Тип Пересечение (Intersection Type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"Type Queries (запросы типа), Alias (псевдонимы типа)","sections":[{"name":"Запросы Типа (Type Queries)","path":"Запросы Типа (Type Queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"Псевдонимы Типов (Type Aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"Литеральный тип Number (Numeric Literal Types)"},{"name":"Литеральный тип String (String Literal Types)","path":"Литеральный тип String (String Literal Types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"Шаблонный литеральный тип String (Template String Literal Types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"Литеральный Тип Boolean (Boolean Literal Types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"Литеральный тип Enum (Enum Literal Types)"}]},{"name":"Object, Array, Tuple","path":"Object, Array, Tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"Object (object) — ссылочный объектный тип"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"Array (type[]) ссылочный массивоподобный тип"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"Tuple ([T0, T1, …, Tn]) тип кортеж"}]},{"name":"Function, Functional Types","path":"Function, Functional Types","sections":[{"name":"Function Types - тип функция","path":"Function Types - тип функция"},{"name":"Functional Types - функциональный тип","path":"Functional Types - функциональный тип"},{"name":"this в сигнатуре функции","path":"this в сигнатуре функции"}]},{"name":"Interfaces","path":"Interfaces","sections":[{"name":"Общая теория","path":"Общая теория"},{"name":"Интерфейс в TypeScript","path":"Интерфейс в TypeScript"},{"name":"Объявление (declaration)","path":"Объявление (declaration)"},{"name":"Конвенции именования интерфейсов","path":"Конвенции именования интерфейсов"},{"name":"Реализация интерфейса (implements)","path":"Реализация интерфейса (implements)"},{"name":"Декларация свойств get и set (accessors)","path":"Декларация свойств get и set (accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"Указание интерфейса в качестве типа (interface types)"},{"name":"Расширение интерфейсов (extends interface)","path":"Расширение интерфейсов (extends interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"Расширение интерфейсом класса (extends class)"},{"name":"Описание класса (функции-конструктора)","path":"Описание класса (функции-конструктора)"},{"name":"Описание функционального выражения","path":"Описание функционального выражения"},{"name":"Описание индексных членов в объектных типов","path":"Описание индексных членов в объектных типов"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"Инлайн интерфейсы (Inline Interface)"},{"name":"Слияние интерфейсов","path":"Слияние интерфейсов"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"Индексные члены (определение динамических ключей)"},{"name":"Строгая проверка при обращении к динамическим ключам","path":"Строгая проверка при обращении к динамическим ключам"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"Модификаторы доступа (Access Modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"Модификатор доступа public (публичный)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"Модификатор доступа private (закрытый или скрытый)"},{"name":"Модификатор доступа protected (защищенный)","path":"Модификатор доступа protected (защищенный)"},{"name":"Модификаторы доступа и конструкторы класса","path":"Модификаторы доступа и конструкторы класса"},{"name":"Быстрое объявление полей","path":"Быстрое объявление полей"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"Закрытые поля определенные спецификацией ECMAScript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"Нативный закрытый (private) модификатор доступа"}]},{"name":"Абстрактные классы (abstract classes)","path":"Абстрактные классы (abstract classes)","sections":[{"name":"Общие характеристики","path":"Общие характеристики"},{"name":"Теория","path":"Теория"}]},{"name":"Полиморфный тип this","path":"Полиморфный тип this","sections":[{"name":"this - как тип","path":"this - как тип"}]},{"name":"Модификатор readonly (только для чтения)","path":"Модификатор readonly (только для чтения)","sections":[{"name":"Модификатор readonly","path":"Модификатор readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"Definite Assignment Assertion Modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"Модификатор утверждения не принадлежности значения к типу undefined"}]},{"name":"Классы — Тонкости","path":"Классы — Тонкости","sections":[{"name":"Классы - Тонкости implements","path":"Классы - Тонкости implements"},{"name":"Частичное слияние интерфейса с классом","path":"Частичное слияние интерфейса с классом"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"Переопределение свойств полями и наоборот при наследовании"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","sections":[{"name":"Нюансы на практике","path":"Нюансы на практике"}]},{"name":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","path":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","sections":[{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"Оператор ! (Non-Null and Non-Undefined Operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"Оператор ! (Definite Assignment Assertion)"}]},{"name":"Обобщения (Generics)","path":"Обобщения (Generics)","sections":[{"name":"Обобщения - общие понятия","path":"Обобщения - общие понятия"},{"name":"Обобщения в TypeScript","path":"Обобщения в TypeScript"},{"name":"Параметры типа - extends (generic constraints)","path":"Параметры типа - extends (generic constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"Параметра типа - значение по умолчанию = (generic parameter defaults)"},{"name":"Параметры типа - как тип данных","path":"Параметры типа - как тип данных"}]},{"name":"Дискриминантное объединение (Discriminated Union)","path":"Дискриминантное объединение (Discriminated Union)","sections":[{"name":"Дискриминантное объединение","path":"Дискриминантное объединение"}]},{"name":"Импорт и экспорт только типа","path":"Импорт и экспорт только типа","sections":[{"name":"Предыстория возникновения import type и export type","path":"Предыстория возникновения import type и export type"},{"name":"import type и export type - форма объявления","path":"import type и export type - форма объявления"},{"name":"Импорт и экспорт только типа на практике","path":"Импорт и экспорт только типа на практике"},{"name":"Вспомогательный флаг --importsNotUsedAsValues","path":"Вспомогательный флаг --importsNotUsedAsValues"}]},{"name":"Утверждение типов (Type Assertion)","path":"Утверждение типов (Type Assertion)","sections":[{"name":"Утверждение типов - общее","path":"Утверждение типов - общее"},{"name":"Утверждение типа <Type> синтаксис","path":"Утверждение типа <Type> синтаксис"},{"name":"Утверждение типа с помощью оператора as","path":"Утверждение типа с помощью оператора as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"Приведение (утверждение) к константе (const assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"Утверждение в сигнатуре (Signature Assertion)"}]},{"name":"Защитники типа","path":"Защитники типа","sections":[{"name":"Защитники Типа - общее","path":"Защитники Типа - общее"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"Сужение диапазона множества типов на основе типа данных"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"Сужение диапазона множества типов на основе доступных членов объекта"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"Сужение диапазона множества типов на основе функции, определенной пользователем"}]},{"name":"Вывод типов","path":"Вывод типов","sections":[{"name":"Вывод типов - общие сведения","path":"Вывод типов - общие сведения"},{"name":"Вывод примитивных типов","path":"Вывод примитивных типов"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)"},{"name":"Вывод объектных типов","path":"Вывод объектных типов"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"Вывод типа для полей класса на основе инициализации их в конструкторе"},{"name":"Вывод объединенных (Union) типов","path":"Вывод объединенных (Union) типов"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"Вывод пересечения (Intersection) с дискриминантными полями"},{"name":"Вывод типов кортеж (Tuple)","path":"Вывод типов кортеж (Tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"Совместимость объектных типов (Compatible Object Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость объектных типов в TypeScript","path":"Совместимость объектных типов в TypeScript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"Совместимость функциональных типов (Compatible Function Types)","sections":[{"name":"Важно","path":"Важно"},{"name":"Совместимость параметров","path":"Совместимость параметров"},{"name":"Совместимость возвращаемого значения","path":"Совместимость возвращаемого значения"}]},{"name":"Совместимость объединений (Union Types)","path":"Совместимость объединений (Union Types)","sections":[{"name":"Совместимость","path":"Совместимость"}]},{"name":"Типизация в TypeScript","path":"Типизация в TypeScript","sections":[{"name":"Общие сведения","path":"Общие сведения"},{"name":"Статическая типизация (static typing)","path":"Статическая типизация (static typing)"},{"name":"Сильная типизация (strongly typed)","path":"Сильная типизация (strongly typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"Явно типизированный (explicit typing) с выводом типов (type inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)"},{"name":"Вариантность (variance)","path":"Вариантность (variance)"},{"name":"Наилучший общий тип (Best common type)","path":"Наилучший общий тип (Best common type)"},{"name":"Контекстный тип (Contextual Type)","path":"Контекстный тип (Contextual Type)"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","sections":[{"name":"Запрос ключей keyof","path":"Запрос ключей keyof"},{"name":"Поиск типов (Lookup Types)","path":"Поиск типов (Lookup Types)"},{"name":"Сопоставление типов (Mapped Types)","path":"Сопоставление типов (Mapped Types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"Префиксы + и - в сопоставленных типах"}]},{"name":"Условные типы (Conditional Types)","path":"Условные типы (Conditional Types)","sections":[{"name":"Условные типы на практике","path":"Условные типы на практике"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"Распределительные условные типы (Distributive Conditional Types)"},{"name":"Вывод типов в условном типе","path":"Вывод типов в условном типе"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"Readonly, Partial, Required, Pick, Record","sections":[{"name":"Readonly<T> (сделать члены объекта только для чтения)","path":"Readonly<T> (сделать члены объекта только для чтения)"},{"name":"Partial<T> (сделать все члены объекта необязательными)","path":"Partial<T> (сделать все члены объекта необязательными)"},{"name":"Required<T> (сделать все необязательные члены обязательными)","path":"Required<T> (сделать все необязательные члены обязательными)"},{"name":"Pick (отфильтровать объектный тип)","path":"Pick (отфильтровать объектный тип)"},{"name":"Record<K, T> (динамически определить поле в объектном типе)","path":"Record<K, T> (динамически определить поле в объектном типе)"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","sections":[{"name":"Exclude<T, U> (исключает из T признаки присущие U)","path":"Exclude<T, U> (исключает из T признаки присущие U)"},{"name":"Extract<T, U> (общие для двух типов признаки)","path":"Extract<T, U> (общие для двух типов признаки)"},{"name":"NonNullable<T> (удаляет типы null и undefined)","path":"NonNullable<T> (удаляет типы null и undefined)"},{"name":"ReturnType<T> (получить тип значения возвращаемого функцией)","path":"ReturnType<T> (получить тип значения возвращаемого функцией)"},{"name":"InstanceType<T> (получить через тип класса тип его экземпляра)","path":"InstanceType<T> (получить через тип класса тип его экземпляра)"},{"name":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)","path":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)"},{"name":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)","path":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)"},{"name":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)","path":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","sections":[{"name":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)","path":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)"},{"name":"ReadonlyArray<T> (неизменяемый массив)","path":"ReadonlyArray<T> (неизменяемый массив)"},{"name":"ReadonlyMap<K, V> (неизменяемая карта)","path":"ReadonlyMap<K, V> (неизменяемая карта)"},{"name":"ReadonlySet<T> (неизменяемое множество)","path":"ReadonlySet<T> (неизменяемое множество)"}]},{"name":"Синтаксические конструкции и операторы","path":"Синтаксические конструкции и операторы","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)"},{"name":"Операнды для delete должны быть необязательными","path":"Операнды для delete должны быть необязательными"}]},{"name":"Типизированный React","path":"Типизированный React","sections":[{"name":"Расширение .tsx","path":"Расширение .tsx"}]},{"name":"Функциональные компоненты","path":"Функциональные компоненты","sections":[{"name":"Определение компонента как Function Declaration","path":"Определение компонента как Function Declaration"},{"name":"Определение компонента как Function Expression","path":"Определение компонента как Function Expression"}]},{"name":"Классовые компоненты","path":"Классовые компоненты","sections":[{"name":"Производные от Component<P, S, SS>","path":"Производные от Component<P, S, SS>"},{"name":"Производные от PureComponent<Props, State, Snapshot>","path":"Производные от PureComponent<Props, State, Snapshot>"}]},{"name":"Универсальные компоненты","path":"Универсальные компоненты","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"Обобщенные компоненты (Generics Component)"}]},{"name":"Типизированные хуки","path":"Типизированные хуки","sections":[{"name":"Предопределенные хуки - useState<T>()","path":"Предопределенные хуки - useState<T>()"},{"name":"Предопределенные хуки - useEffect() и useLayoutEffect()","path":"Предопределенные хуки - useEffect() и useLayoutEffect()"},{"name":"Предопределенные хуки - useContext<T>()","path":"Предопределенные хуки - useContext<T>()"},{"name":"Предопределенные хуки - useReducer<R>()","path":"Предопределенные хуки - useReducer<R>()"},{"name":"Предопределенные хуки - useCallback<T>()","path":"Предопределенные хуки - useCallback<T>()"},{"name":"Предопределенные хуки - useRef<T>()","path":"Предопределенные хуки - useRef<T>()"},{"name":"Предопределенные хуки - useImperativeHandle<T, R>()","path":"Предопределенные хуки - useImperativeHandle<T, R>()"},{"name":"Предопределенные хуки - useMemo<T>()","path":"Предопределенные хуки - useMemo<T>()"},{"name":"Предопределенные хуки - useDebugValue<T>()","path":"Предопределенные хуки - useDebugValue<T>()"},{"name":"Пользовательский хук","path":"Пользовательский хук"}]},{"name":"Контекст (Context)","path":"Контекст (Context)","sections":[{"name":"Определение контекста","path":"Определение контекста"}]},{"name":"HOC (Higher-Order Components)","path":"HOC (Higher-Order Components)","sections":[{"name":"Определение hoc","path":"Определение hoc"},{"name":"Определение hoc на основе функционального компонента","path":"Определение hoc на основе функционального компонента"},{"name":"Определение hoc на основе классового компонента","path":"Определение hoc на основе классового компонента"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"Пространства имен (namespace) и модули (module)","sections":[{"name":"Namespace и module — предназначение","path":"Namespace и module — предназначение"},{"name":"Namespace - определение","path":"Namespace - определение"},{"name":"Модули (export, import) — определение","path":"Модули (export, import) — определение"},{"name":"Конфигурирование проекта","path":"Конфигурирование проекта"}]},{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения","sections":[{"name":"Настройка рабочего окружения","path":"Настройка рабочего окружения"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"Сборка проекта с помощью tsc (TypeScript compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"Сборка с использованием ссылок на проекты","sections":[{"name":"Ссылки на проекты","path":"Ссылки на проекты"}]},{"name":"Декларации","path":"Декларации","sections":[{"name":"Что такое декларация (Declaration)","path":"Что такое декларация (Declaration)"},{"name":"Установка деклараций с помощью @types","path":"Установка деклараций с помощью @types"},{"name":"Подготовка к созданию декларации","path":"Подготовка к созданию декларации"},{"name":"Разновидности деклараций","path":"Разновидности деклараций"},{"name":"Декларации и область видимости","path":"Декларации и область видимости"},{"name":"Декларации для библиотек с одной точкой входа","path":"Декларации для библиотек с одной точкой входа"},{"name":"Декларации для библиотек с множеством точек входа","path":"Декларации для библиотек с множеством точек входа"},{"name":"Создание деклараций вручную","path":"Создание деклараций вручную"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"Директива с тройным слешем (triple-slash directives)"},{"name":"Импортирование декларации (import)","path":"Импортирование декларации (import)"}]},{"name":"Публикация TypeScript","path":"Публикация TypeScript","sections":[{"name":"Публикация","path":"Публикация"}]},{"name":"Опции компилятора","path":"Опции компилятора","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressExcessPropertyErrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressImplicitAnyIndexErrors"},{"name":"noImplicitAny","path":"noImplicitAny"},{"name":"checkJs","path":"checkJs"},{"name":"JSX","path":"JSX"},{"name":"jsxFactory","path":"jsxFactory"},{"name":"target (t)","path":"target (t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysStrict"},{"name":"strictNullChecks","path":"strictNullChecks"},{"name":"stripInternal","path":"stripInternal"},{"name":"noImplicitThis","path":"noImplicitThis"},{"name":"noImplicitUseStrict","path":"noImplicitUseStrict"},{"name":"baseUrl","path":"baseUrl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootDir"},{"name":"rootDirs","path":"rootDirs"},{"name":"traceResolution","path":"traceResolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"noLib"},{"name":"noResolve","path":"noResolve"},{"name":"noStrictGenericChecks","path":"noStrictGenericChecks"},{"name":"preserveConstEnums","path":"preserveConstEnums"},{"name":"removeComments","path":"removeComments"},{"name":"noUnusedLocals","path":"noUnusedLocals"},{"name":"noUnusedParameters","path":"noUnusedParameters"},{"name":"skipLibCheck","path":"skipLibCheck"},{"name":"declarationDir","path":"declarationDir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeRoots"},{"name":"allowUnusedLabels","path":"allowUnusedLabels"},{"name":"noImplicitReturns","path":"noImplicitReturns"},{"name":"noFallthroughCasesInSwitch","path":"noFallthroughCasesInSwitch"},{"name":"outFile","path":"outFile"},{"name":"allowSyntheticDefaultImports","path":"allowSyntheticDefaultImports"},{"name":"allowUnreachableCode","path":"allowUnreachableCode"},{"name":"allowJs","path":"allowJs"},{"name":"reactNamespace","path":"reactNamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleResolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noEmitHelpers"},{"name":"newLine","path":"newLine"},{"name":"inlineSourceMap","path":"inlineSourceMap"},{"name":"inlineSources","path":"inlineSources"},{"name":"noEmitOnError","path":"noEmitOnError"},{"name":"noEmit","path":"noEmit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downlevelIteration"},{"name":"emitBOM","path":"emitBOM"},{"name":"emitDecoratorMetadata","path":"emitDecoratorMetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceConsistentCasingInFileNames"},{"name":"help (h)","path":"help (h)"},{"name":"importHelpers","path":"importHelpers"},{"name":"isolatedModules","path":"isolatedModules"},{"name":"listEmittedFiles","path":"listEmittedFiles"},{"name":"listFiles","path":"listFiles"},{"name":"sourceRoot","path":"sourceRoot"},{"name":"mapRoot","path":"mapRoot"},{"name":"maxNodeModuleJsDepth","path":"maxNodeModuleJsDepth"},{"name":"project (p)","path":"project (p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version (v)"},{"name":"watch (w)","path":"watch (w)"},{"name":"preserveSymlinks","path":"preserveSymlinks"},{"name":"strictFunctionTypes","path":"strictFunctionTypes"},{"name":"locale","path":"locale"},{"name":"strinctPropertyInitialization","path":"strinctPropertyInitialization"},{"name":"esModuleInterop","path":"esModuleInterop"},{"name":"emitDeclarationsOnly","path":"emitDeclarationsOnly"},{"name":"resolveJsonModule","path":"resolveJsonModule"},{"name":"declarationMap","path":"declarationMap"},{"name":"strictBindCallApply","path":"strictBindCallApply"},{"name":"showConfig","path":"showConfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsBuildInfoFile"},{"name":"allowUmdGlobalAccess","path":"allowUmdGlobalAccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disableSourceOfProjectReferenceRedirect"},{"name":"useDefineForClassFields","path":"useDefineForClassFields"},{"name":"importsNotUsedAsValues","path":"importsNotUsedAsValues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumeChangesOnlyAffectDirectDependencies"},{"name":"watchFile","path":"watchFile"},{"name":"watchDirectory","path":"watchDirectory"},{"name":"fallbackPolling","path":"fallbackPolling"},{"name":"synchronousWatchDirectory","path":"synchronousWatchDirectory"},{"name":"noUncheckedIndexedAccess","path":"noUncheckedIndexedAccess"}]}]}},"staticQueryHashes":["408059355","63159454"]}